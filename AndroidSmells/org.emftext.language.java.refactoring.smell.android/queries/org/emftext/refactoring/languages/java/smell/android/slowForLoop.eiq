package org.emftext.refactoring.languages.^java.smell.android

import "http://www.emftext.org/java/classifiers";
import "http://www.emftext.org/java/references";
import "http://www.emftext.org/java/commons";
import "http://www.emftext.org/java/types";
import "http://www.emftext.org/java/variables";
import "http://www.emftext.org/java/expressions";
import "http://www.emftext.org/java/statements";
import "http://www.emftext.org/java/generics";
import "http://www.emftext.org/java/operators";
import "http://www.emftext.org/java/instantiations";
import "http://www.emftext.org/java/literals";

//import java ^java.math.BigInteger;

pattern slowForLoop(ForLoop : ForLoop, CounterVariable : Variable, IteratorVariable : Variable){
	find slowForLoopInit(ForLoop, CounterVariable);
	find slowForLoopCondition(ForLoop, IteratorVariable);
	find slowForLoopUpdates(ForLoop, CounterVariable);
}

pattern slowForLoopInit(forLoop : ForLoop, variable : Variable){
	find initLocalVariable(forLoop, variable, _value);
} or {
	find initVariable(forLoop, variable, _value);
}

private pattern initLocalVariable(loop : ForLoop, localVariable: LocalVariable, value) {
	ForLoop.init(loop, localVariable);
	LocalVariable.initialValue(localVariable, initValue);
	// check that value is 0
	DecimalIntegerLiteral.decimalValue(initValue, value);
//	check(new BigInteger("0").equals(value));
} 

private pattern initVariable(loop : ForLoop, variable : Variable, value) {
	ForLoop.init(loop, initializer);
	ExpressionList.expressions(initializer, assignment);
	// assure that "=" is used as assignment (instead of, e.g., "+=")
	AssignmentExpression.assignmentOperator(assignment, operator);
	Assignment(operator);
	// check that value is 0
	AssignmentExpression.value(assignment, initValue);
	DecimalIntegerLiteral.decimalValue(initValue, value);
//	check(new BigInteger("0").equals(value));
	// return Variable
	AssignmentExpression.child(assignment, variableReference);
	IdentifierReference.target(variableReference, variable);
}

pattern slowForLoopCondition(forLoop : ForLoop, iteratorVariable : Variable){
	// check operator
	find loopConditionOperators(forLoop, condition);
	// check iterable variable
	find loopConditionChildren(forLoop, condition, iteratorVariable);
}

private pattern loopConditionOperators(loop : ForLoop, condition) {
	ForLoop.condition(loop, condition);
	RelationExpression.relationOperators(condition, operator);
	LessThan(operator);
}

private pattern loopConditionChildren(loop : ForLoop, condition, iteratorVariable : Variable) {
	ForLoop.condition(loop, condition);
	RelationExpression.children(condition, child);
	IdentifierReference.target(child, iteratorVariable);
	find iterableVariable(iteratorVariable, _type);
}

pattern iterableVariable(variable : Variable, iterableVariableType){
	Variable.typeReference(variable, typeReference);
	NamespaceClassifierReference.classifierReferences(typeReference, classifierReference);
	ClassifierReference.target(classifierReference, iterableVariableType);
	
	ClassifierReference.target(classifierReference, interface);
	find implementorOf(interface, "Iterable");
}

pattern implementorOf(classifier : Classifier, interfaceName){
	Interface.name(interface, interfaceName);
	find implementsOrExtends+(classifier, interface);
}

pattern implementsOrExtends(classifier : Classifier, superClassifier : Classifier){
	Interface.^extends(classifier, classifierRef);
	ClassifierReference.target(classifierRef, superClassifier);
} or {
	Class.implements(classifier, classifierRef);
	ClassifierReference.target(classifierRef, superClassifier);
}

//TODO: Multiple Updates?
pattern slowForLoopUpdates(forLoop : ForLoop, variable : Variable){
	ForLoop.updates(forLoop, updateExpression);	
	UnaryModificationExpression.operator(updateExpression, operator);
	PlusPlus(operator);
	UnaryModificationExpression.child(updateExpression, updateExpressionChild);
	IdentifierReference.target(updateExpressionChild, variable);
	Variable(variable);
}