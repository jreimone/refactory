#if( ! $targetClassIsInterface )
private $!transient$container $name;
#end
##
#set( $return = $imports.addToImports("java.util.*") )
#set( $return = $imports.addToImports("de.upb.tools.fca.*") )
#if( !$qualified || $internalQualified )
$visibility boolean addTo$methodSuffix (#if($partnerKey)$partnerKey partnerKey, #end$type value)##
#if( $targetClassIsInterface )
;
#else

{
#if( $internalQualified )
   return this.addTo$methodSuffix (#if($partnerKey)partnerKey, #end
getKeyFor$methodSuffix (value), value);
#else
   boolean changed = false;

   if (value != null$!linkedList)
   {
      if (this.$name == null)
      {
         this.$name = new $container ($!constParams);

      }
      $!preHook
      changed = this.${name}.add (value);
#if( !$ref )
      if (changed)
      {
         value.$insert;
      }
#end
      $!postHook
   }
   return changed;
#end
}
#end
#end

$visibility boolean removeFrom$methodSuffix ($type value)##
#if( $targetClassIsInterface )
;
#else

{
#if( $internalQualified )
   return removeFrom$methodSuffix (getKeyFor$methodSuffix (value), value);
#else
   boolean changed = false;

#if( $qualified )
   if (this.$name != null)
   {
      Iterator iter = this.entriesOf$methodSuffix ();
      Map.Entry entry;
      while (iter.hasNext ())
      {
         entry = (Map.Entry) iter.next ();
         if (entry.getValue () == value)
         {
            $!preHook
            if (this.removeFrom$methodSuffix (($keyWrapper) entry.getKey (), value))
            {
               changed = true;
            }
            $!postHook
         }
      }
   }
#else
## TODO hier value != null und oben nicht?
   if ((this.$name != null) && (value != null))
   {
      $!preHook
      changed = this.${name}.remove (value);
#if( !$ref )
      if (changed)
      {
         value.$remove;
      }
#end
      $!postHook
   }
#end
   return changed;
#end
}
#end

$visibility void removeAllFrom$methodSuffix ()##
#if( $targetClassIsInterface )
;
#else

{
#if( $ref )
   if (this.$name != null && this.${name}.size () > 0)
   {
      $!preHook
      this.${name}.clear();
      $!postHook
   }
#else
   $!preHook
#if( $qualified )
   Iterator iter = entriesOf$methodSuffix ();
   Map.Entry entry;
   while (iter.hasNext ())
   {
      entry = (Map.Entry) iter.next ();
      removeFrom$methodSuffix (($keyWrapper) entry.getKey (), ($type) entry.getValue ());
   }
#else
   $type tmpValue;
   Iterator iter = this.iteratorOf$methodSuffix ();

   while (iter.hasNext ())
   {
      tmpValue = ($type) iter.next ();
      this.removeFrom$methodSuffix (tmpValue);
   }
   $!postHook
#end
#end
}
#end

$visibility boolean hasIn$methodSuffix ($type value)##
#if( $targetClassIsInterface )
;
#else

{
#if( $internalQualified )
   return (this.hasIn$methodSuffix (this.getKeyFor$methodSuffix (value), value));
#else
   return ((this.$name != null) &&
#if( $qualified )
           this.${name}.containsValue (value));
#else
           (value != null) &&
           this.${name}.contains (value));
#end
#end
}
#end

$visibility #if( $ordered )List#end
Iterator iteratorOf$methodSuffix ()##
#if( $targetClassIsInterface )
;
#else

{
        FHashSet set = new FHashSet();
        
        MatlabAdapter.getAdapterInstance().execute(
                "objectHandle=find_system(" + getDiagram().getObjectHandle() + ", 'findall', 'on', 'type', 'line', "
                        + "'DstBlockHandle', " + getObjectHandle() + ")");

        String objectHandleSize = MatlabAdapter.getAdapterInstance().execute("length(objectHandle)");

        int length = new Integer(objectHandleSize).intValue();
        for (int i = 1; i <= length; i++)
        {
            // retrieve the line handle
            String handle = MatlabAdapter.getAdapterInstance().execute("sprintf('%.15f', objectHandle(+" + i + "))");
            set.add(MatlabAdapterFactory.get().provideLine(handle));
        }

        return set.iterator();

}
#end

$visibility int sizeOf$methodSuffix ()##
#if( $targetClassIsInterface )
;
#else

{
   return ((this.$name == null)
           ? 0
           : this.${name}.size ());
}
#end
##
#if( $sorted )
#parse("java/asWritten:classDiag/assoc/sorted.vm" )
#end
#if( $ordered )
#parse("java/asWritten:classDiag/assoc/sorted.vm" )
#parse("java/asWritten:classDiag/assoc/ordered.vm" )
#end