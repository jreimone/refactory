### TypeOf[ ${elem} ] := de.uni_paderborn.fujaba.metamodel.structure.FRole
### TypeOf[ ${token} ] := de.uni_kassel.fujaba.codegen.rules.Token
#macro(container)
F$!{prop}##
#if($qualified && $toMany)
Duplicated##
#end
#if($sorted)
Tree##
#elseif($ordered)
Linked##
#else
Hash##
#end
#if($qualified)
Map##
#elseif($ordered)
List##
#else
Set##
#end
#end
##
##
#set( $role = $elem )
#set( $partnerRole = $role.PartnerRole )
#set( $adornment = $partnerRole.Adornment )
#set( $partnerAdornment = $role.Adornment )
## FRole.NONE = 0
#set( $isAggregation = ($adornment == 1) )## FRole.AGGREGATION = 1
#set( $isComposition = ($adornment == 2) )## FRole.COMPOSITION = 2
#set( $isParent = ($partnerAdornment == 2 || $partnerAdornment == 1) )
#set( $isUsage = $partnerRole.hasKeyInStereotypes("context") || $role.hasKeyInStereotypes("usage") )
#set( $ref = ($partnerAdornment == 3) )## FRole.REFERENCE = 3
##
#set( $readOnly = $partnerRole.readOnly )
##TODO: regard readOnly in to-many and qualified
#set( $name = $role.AttrName )
#set( $type = $role.Target.Name )
#set( $visibility = $utility.getVisibilityString($role.Visibility) )
### TypeOf[ ${token}.Parent ] := de.uni_kassel.fujaba.codegen.classdiag.ASGElementToken
#set( $class = $token.Parent.Element )
#if ( $role.Assoc.hasKeyInStereotypes("transient") )
#set( $transient = "transient " )
#end
#if( $partnerRole.Target.hasKeyInStereotypes("JavaBean") )
#set( $prop = "Prop" )
#end
## check , if target Class is an interface
### TypeOf[ ${class} ] := de.uni_paderborn.fujaba.metamodel.structure.FClass
#set( $targetClassIsInterface = $utility.isInterface($class))
##
#if ( ${role.InheritedCodeStyle} )#set( $style = "$lang/${role.InheritedCodeStyle.Name}:" )
#else#set( $style = "$lang/default:" )#end
#if ( ${partnerRole.InheritedCodeStyle} )#set( $partnerStyle = "$lang/${partnerRole.InheritedCodeStyle.Name}:" )
#else#set( $partnerStyle = "$lang/default:" )#end
#parse("${style}classDiag/assoc/roleProperties.vm")
#set( $keyType = $qualified.Type )
#set( $key = $utility.getTypeAsString($keyType) )
#set( $keyWrapper = $utility.getProgLangWrapperType($keyType) )
#if( !$ref )## we don't need to analyze the partner stuff if it's a reference
#set( $partnerQualified = $role.Qualifier )
#if( $partnerQualified && $partnerQualified.isExternalQualifier() )
#set( $partnerKey = $utility.getTypeAsString($partnerQualified.Type) )
#end
#set( $partnerToMany = ( $partnerRole.Card.UpperBound > 1 ) )
#if($partnerRole.hasKeyInStereotypes("pluralized"))
#set( $partnerName = $utility.pluralize($utility.upFirstChar($partnerRole.AttrName)) )
#else
#if("class" == $partnerRole.AttrName)
#set( $partnerName = "$utility.upFirstChar($partnerRole.AttrName)_" )
#else
#set( $partnerName = $utility.upFirstChar($partnerRole.AttrName) )
#end
#end
#end
##
#if ( $sorted )
#set( $comparator = $role.SortedComparator.trim() )
#end
#parse("${style}classDiag/assoc/accessorSuffix.vm")