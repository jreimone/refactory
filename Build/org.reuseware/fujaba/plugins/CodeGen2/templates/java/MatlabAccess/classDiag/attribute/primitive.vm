#parse("java/default:classDiag/attribute/import.vm" )
#set( $return = $imports.addToImports($attrType.FullClassName) )
## check , if target Class is an interface
#set( $class = $token.Parent.Element )
#set ( $classIsInterface = $utility.isInterface($class) )
#set( $attrname = $name )
##

#if ( !$classIsInterface || ($static && $final))
#if ($prop && !$static)
public static final String PROPERTY_$utility.camelToUpperCase($name) = "$name";
#end
$attrvis $!static$!final$!transient$type $name#if($init) = $init#end;
#end
#if( !($static && $final) && ($createMethods!=1))
#if( !$static ) #set( $name = "this.$name" ) #end

#if( !$final )## no setter for final attributes
$visibility $!{static}void set$methodSuffix ($type value)##
#if ( $classIsInterface )
;
#else

{
#if ( $prop || $preHook || $postHook )
#if ( $type == "String" )
#set( $return = $imports.addToImports("de.upb.tools.sdm.*") )
   if ( JavaSDM.stringCompare ($name, value) != 0 )
#else
   if ( $name != value )
#end
   {$!preHook
#if ($prop)
      $type oldValue = $name;
#end
#end
      $name = value;
      de.uni_paderborn.mate.adapter.MatlabAdapter.get().setParam(getObjectHandle(), "$attrname", value);
#if ( $prop || $preHook || $postHook )
#if ($prop && !$static)
      getPropertyChangeSupport().firePropertyChange(PROPERTY_$utility.camelToUpperCase($attr.Name), oldValue, value);
#end
   $!postHook}
#end
}
#end
#end

$visibility $!static$type #if( $type.equals("boolean") )is#else
get#end
$methodSuffix ()##
#if ( $classIsInterface )
;
#else

{
   $name = de.uni_paderborn.mate.adapter.MatlabAdapter.get().getParam(getObjectHandle(), "$attrname")[0];
 
   return $name;
}
#end
#end