/*******************************************************************************
 * Copyright (c) 2010-2012, Zoltan Ujhelyi, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zoltan Ujhelyi - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.incquery.patternlanguage.emf.EMFPatternLanguage with org.eclipse.incquery.patternlanguage.PatternLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/incquery/patternlanguage/PatternLanguage" as core
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

generate eMFPatternLanguage "http://www.eclipse.org/incquery/patternlanguage/emf/EMFPatternLanguage"

EMFPatternModel returns core::PatternModel:
	{PatternModel}
	('package' packageName = QualifiedName ';'?)?
	importPackages+=ImportDeclaration*
	patterns+=Pattern*;
	
ImportDeclaration:
	PackageImport | JavaImport
;	
	
PackageImport:
	'import' ePackage = [ecore::EPackage|STRING] ';'?// ('as' alias=ID)?
;

JavaImport:
	'import' importedNamespace =  QualifiedNameWithWildCard ';'?
;

QualifiedNameWithWildCard:
	QualifiedName ('.' '*')?
;
	
Constraint returns core::Constraint:
	CheckConstraint	| 
	CompareConstraint | PatternCompositionConstraint | PathExpressionConstraint // Copied from PatternLanguage
	| EClassifierConstraint                                 // Additions
;

EClassifierConstraint:
	type = Type  '(' var = VariableReference ')'
; 

Type returns core::EntityType:
	{ClassType}
	classname=[ecore::EClassifier]
;

RefType returns core::RelationType:
	{ReferenceType}
	refname=[ecore::EStructuralFeature]
;

LiteralValueReference returns core::ValueReference:
	IntValue | StringValue | 
	DoubleValue | BoolValue 			//Copied from PatternLanguage 
	| EnumValue							//Additions
;

EnumValue:
	(enumeration = [ecore::EEnum])? '::' literal = [ecore::EEnumLiteral]
;
