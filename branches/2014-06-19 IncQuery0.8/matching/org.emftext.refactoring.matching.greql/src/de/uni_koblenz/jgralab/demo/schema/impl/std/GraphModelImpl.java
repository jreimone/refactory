/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.demo.schema.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.exception.GraphIOException;
import de.uni_koblenz.jgralab.exception.NoSuchAttributeException;

import java.io.IOException;

public class GraphModelImpl extends GraphImpl implements de.uni_koblenz.jgralab.Graph, de.uni_koblenz.jgralab.demo.schema.GraphModel {

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public GraphModelImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public GraphModelImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public GraphModelImpl(java.lang.String id, int vMax, int eMax) {
		super(id, de.uni_koblenz.jgralab.demo.schema.GraphModel.GC, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public GraphModelImpl(java.lang.String id) {
		super(id, de.uni_koblenz.jgralab.demo.schema.GraphModel.GC);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return de.uni_koblenz.jgralab.demo.schema.GraphModel.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return de.uni_koblenz.jgralab.demo.schema.GraphModel.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("GraphModel doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("GraphModel doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("GraphModel doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("GraphModel doesn't contain an attribute " + attributeName);
	}

	// ------------------------ Code for Connection ------------------------

	public de.uni_koblenz.jgralab.demo.schema.Connection getFirstConnection() {
		return (de.uni_koblenz.jgralab.demo.schema.Connection)getFirstEdge(de.uni_koblenz.jgralab.demo.schema.Connection.EC);
	}

	public de.uni_koblenz.jgralab.demo.schema.Connection createConnection(de.uni_koblenz.jgralab.demo.schema.Node alpha, de.uni_koblenz.jgralab.demo.schema.Node omega) {
		return graphFactory.<de.uni_koblenz.jgralab.demo.schema.Connection> createEdge(de.uni_koblenz.jgralab.demo.schema.Connection.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralab.demo.schema.Connection createConnection(int id, de.uni_koblenz.jgralab.demo.schema.Node alpha, de.uni_koblenz.jgralab.demo.schema.Node omega) {
		return graphFactory.<de.uni_koblenz.jgralab.demo.schema.Connection> createEdge(de.uni_koblenz.jgralab.demo.schema.Connection.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for Node ------------------------

	public de.uni_koblenz.jgralab.demo.schema.Node getFirstNode() {
		return (de.uni_koblenz.jgralab.demo.schema.Node)getFirstVertex(de.uni_koblenz.jgralab.demo.schema.Node.VC);
	}

	public de.uni_koblenz.jgralab.demo.schema.Node createNode() {
		return graphFactory.<de.uni_koblenz.jgralab.demo.schema.Node> createVertex(de.uni_koblenz.jgralab.demo.schema.Node.VC, 0, this);
	}

	public de.uni_koblenz.jgralab.demo.schema.Node createNode(int id) {
		return graphFactory.<de.uni_koblenz.jgralab.demo.schema.Node> createVertex(de.uni_koblenz.jgralab.demo.schema.Node.VC, id, this);
	}

	public Iterable<de.uni_koblenz.jgralab.demo.schema.Connection> getConnectionEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralab.demo.schema.Connection>(this, de.uni_koblenz.jgralab.demo.schema.Connection.EC);
	}
	

	public Iterable<de.uni_koblenz.jgralab.demo.schema.Node> getNodeVertices() {
		return new VertexIterable<de.uni_koblenz.jgralab.demo.schema.Node>(this, de.uni_koblenz.jgralab.demo.schema.Node.VC, null);
	}
	
	public Iterable<de.uni_koblenz.jgralab.demo.schema.Node> getNodeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_koblenz.jgralab.demo.schema.Node> filter) {
		return new VertexIterable<de.uni_koblenz.jgralab.demo.schema.Node>(this, de.uni_koblenz.jgralab.demo.schema.Node.VC, filter);
	}
	
}
