/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.demo.schema.impl.std;

import de.uni_koblenz.jgralab.impl.std.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.exception.GraphIOException;
import de.uni_koblenz.jgralab.exception.NoSuchAttributeException;

import de.uni_koblenz.jgralab.demo.schema.impl.std.ReversedConnectionImpl;

import de.uni_koblenz.jgralab.demo.schema.Node;

import java.io.IOException;
/**
 * FromVertexClass: Node
 * FromRoleName : source
 * ToVertexClass: Node
 * ToRoleName : target
 */

public class ConnectionImpl extends EdgeImpl implements de.uni_koblenz.jgralab.demo.schema.Connection, de.uni_koblenz.jgralab.Edge {

	protected de.uni_koblenz.jgralab.demo.schema.ConnectionType _connectionType;

	protected java.lang.String _name;

	protected java.lang.String _source;

	protected java.lang.String _target;

	public ConnectionImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
		((de.uni_koblenz.jgralab.impl.InternalGraph) graph).addEdge(this, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralab.demo.schema.Connection.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralab.demo.schema.Connection.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("connectionType")) return (T) get_connectionType();
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("source")) return (T) get_source();
		if (attributeName.equals("target")) return (T) get_target();
		throw new NoSuchAttributeException("Connection doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("connectionType")) {
			if (data instanceof String) {
				set_connectionType(de.uni_koblenz.jgralab.demo.schema.ConnectionType.valueOfPermitNull((String) data));
			} else {
				set_connectionType((de.uni_koblenz.jgralab.demo.schema.ConnectionType) data);
			}
			return;
		}
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("source")) {
			set_source((java.lang.String) data);
			return;
		}
		if (attributeName.equals("target")) {
			set_target((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Connection doesn't contain an attribute " + attributeName);
	}

	public de.uni_koblenz.jgralab.demo.schema.ConnectionType get_connectionType() {
		return _connectionType;
	}

	public void set_connectionType(de.uni_koblenz.jgralab.demo.schema.ConnectionType _connectionType) {
		ecaAttributeChanging("connectionType", this._connectionType, _connectionType);
		Object oldValue = this._connectionType;
		this._connectionType = _connectionType;
		graphModified();
		ecaAttributeChanged("connectionType", oldValue, _connectionType);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		ecaAttributeChanging("name", this._name, _name);
		Object oldValue = this._name;
		this._name = _name;
		graphModified();
		ecaAttributeChanged("name", oldValue, _name);
	}

	public java.lang.String get_source() {
		return _source;
	}

	public void set_source(java.lang.String _source) {
		ecaAttributeChanging("source", this._source, _source);
		Object oldValue = this._source;
		this._source = _source;
		graphModified();
		ecaAttributeChanged("source", oldValue, _source);
	}

	public java.lang.String get_target() {
		return _target;
	}

	public void set_target(java.lang.String _target) {
		ecaAttributeChanging("target", this._target, _target);
		Object oldValue = this._target;
		this._target = _target;
		graphModified();
		ecaAttributeChanged("target", oldValue, _target);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_connectionType = de.uni_koblenz.jgralab.demo.schema.ConnectionType.valueOfPermitNull(io.matchEnumConstant());
		set_connectionType(_connectionType);
		_name = io.matchUtfString();
		set_name(_name);
		_source = io.matchUtfString();
		set_source(_source);
		_target = io.matchUtfString();
		set_target(_target);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("connectionType")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_connectionType = de.uni_koblenz.jgralab.demo.schema.ConnectionType.valueOfPermitNull(io.matchEnumConstant());
			set_connectionType(_connectionType);
			return;
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		if (attributeName.equals("source")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_source = io.matchUtfString();
			set_source(_source);
			return;
		}
		if (attributeName.equals("target")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_target = io.matchUtfString();
			set_target(_target);
			return;
		}
		throw new NoSuchAttributeException("Connection doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		if (_connectionType != null) {
			io.writeIdentifier(_connectionType.toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(_name);
		io.writeUtfString(_source);
		io.writeUtfString(_target);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("connectionType")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_connectionType != null) {
				io.writeIdentifier(_connectionType.toString());
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("source")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_source);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("target")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_target);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Connection doesn't contain an attribute " + attributeName);
	}

	public de.uni_koblenz.jgralab.demo.schema.Connection getNextConnectionInGraph() {
		return (de.uni_koblenz.jgralab.demo.schema.Connection)getNextEdge(de.uni_koblenz.jgralab.demo.schema.Connection.EC);
	}

	public de.uni_koblenz.jgralab.demo.schema.Connection getNextConnectionIncidence() {
		return (de.uni_koblenz.jgralab.demo.schema.Connection)getNextIncidence(de.uni_koblenz.jgralab.demo.schema.Connection.EC);
	}

	public de.uni_koblenz.jgralab.demo.schema.Connection getNextConnectionIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.demo.schema.Connection)getNextIncidence(de.uni_koblenz.jgralab.demo.schema.Connection.EC, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedConnectionImpl(this, graph);
	}
	public Node getAlpha() {
		return (Node) super.getAlpha();
	}
	public Node getOmega() {
		return (Node) super.getOmega();
	}
}
