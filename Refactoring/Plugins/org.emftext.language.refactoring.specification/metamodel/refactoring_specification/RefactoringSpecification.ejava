epackage refactoring_specification;

// plain Java imports
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.BasicEList;
 
// import of other EClasses
//import MyEPackage.MyEClass2;

eclass RefactoringSpecification {
	
	getDeclaredVariables() {
		org.eclipse.emf.common.util.EList < org.emftext.language.refactoring.refactoring_specification.Variable > variables = new org.eclipse.emf.common.util.BasicEList < org.emftext.language.refactoring.refactoring_specification.Variable > ( ) ; 
		org.eclipse.emf.common.util.EList < org.emftext.language.refactoring.refactoring_specification.Instruction > instructions = getInstructions ( ) ; 
		for ( org.emftext.language.refactoring.refactoring_specification.Instruction instruction : instructions ) { 
			if ( instruction instanceof org.emftext.language.refactoring.refactoring_specification.VariableDeclarationCommand ) { 
				org.emftext.language.refactoring.refactoring_specification.Variable var = ( ( org.emftext.language.refactoring.refactoring_specification.VariableDeclarationCommand ) instruction ) .getVariable() ; 
				if ( var != null ) { 
					variables .add ( var ) ; 
				} 
			} 
		} 
		return variables ;
	}
	
	getVariableByName(){
		EList<Variable> variables = getDeclaredVariables();
		for (Variable variable : variables) {
			if(variable.getName().equals(name)){
				return variable;
			}
		}
		return null;
	}
}