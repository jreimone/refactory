package org.emftext.refactoring.ui;


import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.ui.IEditorPart;
import org.emftext.language.refactoring.rolemapping.Mapping;
import org.emftext.refactoring.interpreter.IRefactorer;
import org.emftext.refactoring.util.RegistryUtil;

/**
 * This action can be registered to the context menus of editors
 * generated by EMFText to enable refactorings.
 */
public class RefactoringAction extends Action {

	private Mapping mapping;
	private IRefactorer refactorer;
	private ISelectionProvider selectionProvider;
	private EObject refactoredModel;
	private IDiagramEditDomain diagramEditingDomain;
	private TransactionalEditingDomain diagramTransactionalEditingDomain;
	private IEditorPart activeEditor;
	
	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider) {
		super();
		this.mapping = mapping;
		this.refactorer = refactorer;
		this.selectionProvider = selectionProvider;
	}

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider, IDiagramEditDomain diagramEditingDomain, IEditorPart activeEditor) {
		this(mapping, refactorer, selectionProvider);
		this.diagramEditingDomain = diagramEditingDomain;
		this.activeEditor = activeEditor;
	}
	
	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider, TransactionalEditingDomain diagramTransactionalEditingDomain, IEditorPart activeEditor) {
		this(mapping, refactorer, selectionProvider);
		this.diagramTransactionalEditingDomain = diagramTransactionalEditingDomain;
		this.activeEditor = activeEditor;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.jface.action.Action#run()
	 */
	@Override
	public void run() {
		ResourceSet rs = refactorer.getResource().getResourceSet();
		RefactoringRecordingCommand command = null;
		AbstractTransactionalCommand gmfCommand = null;
		TransactionalEditingDomain domain = null;
		try {
			domain = TransactionUtil.getEditingDomain(rs);
			if(domain == null){
				domain = TransactionalEditingDomain.Factory.INSTANCE.createEditingDomain(rs);
			}	
				CommandStack stack = domain.getCommandStack();
				command = new RefactoringRecordingCommand(domain, refactorer, mapping, activeEditor);
				stack.execute(command);
				if(command.didErrorsOccur()){
					if(command.getException() != null){
						throw command.getException();
					}
					throw new Exception("Some instructions couldn't be invoked");
				}
		} catch (Exception e) {
			if(command != null){
				command.undo();
			}
			if(gmfCommand != null){
				try {
					gmfCommand.undo(null, null);
				} catch (ExecutionException e1) {
					RegistryUtil.log("Undo of Refactoring failed", IStatus.ERROR, e);
				}
			}
			RegistryUtil.log("Refactoring rolled back because of the stack trace or message above", IStatus.WARNING, e);
		}
		if(domain != null && diagramTransactionalEditingDomain == null){
			domain.dispose();
		}
	}
}
