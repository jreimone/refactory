package org.emftext.refactoring.ui;

import java.util.Collection;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IWorkspaceRunnable;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature.Setting;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.transaction.RecordingCommand;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.part.FileEditorInput;
import org.emftext.language.refactoring.rolemapping.Mapping;
import org.emftext.refactoring.interpreter.IRefactorer;
import org.emftext.refactoring.util.RegistryUtil;

/**
 * This action can be registered to the context menus of editors
 * generated by EMFText to enable refactorings.
 */
public class RefactoringAction extends Action {

	private Mapping mapping;
	private IRefactorer refactorer;
//	private Resource resource;
	private ISelectionProvider selectionProvider;
	private EObject refactoredModel;
	private IDiagramEditDomain diagramEditingDomain;
	private TransactionalEditingDomain diagramTransactionalEditingDomain;
	private IEditorPart activeEditor;
	
	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider) {
		super();
		this.mapping = mapping;
		this.refactorer = refactorer;
		this.selectionProvider = selectionProvider;
	}

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider, IDiagramEditDomain diagramEditingDomain, IEditorPart activeEditor) {
		this(mapping, refactorer, selectionProvider);
		this.diagramEditingDomain = diagramEditingDomain;
		this.activeEditor = activeEditor;
	}
	
	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider, TransactionalEditingDomain diagramTransactionalEditingDomain, IEditorPart activeEditor) {
		this(mapping, refactorer, selectionProvider);
		this.diagramTransactionalEditingDomain = diagramTransactionalEditingDomain;
		this.activeEditor = activeEditor;
	}

	protected static EObject refactorInternal(IRefactorer refactorer, Mapping mapping, IEditorPart activeEditor) throws CoreException{
		EObject refactoredModel = refactorer.refactor(mapping, false);
		Resource resource = refactorer.getResource();
		if(!refactorer.didErrorsOccur()){
			ResourceSet resourceSet = resource.getResourceSet();
			for (Resource externalReferer : refactorer.getResourcesToSave()) {
				URI uri = externalReferer.getURI();
				Resource temp = resourceSet.getResource(uri, true);
			}
			Map<EObject, Collection<Setting>> externalReferences = EcoreUtil.ExternalCrossReferencer.find(resource);
			for (EObject object : externalReferences.keySet()) {
				Resource externalReference = object.eResource();
				if(externalReference != null && externalReference.getURI().isPlatformResource()){
					resourceSet.getResource(externalReference.getURI(), true);
				}
			}
			
			IWorkspaceRunnable runnable = new SaveAllResourcesWorkspaceRunnable(resourceSet, resource, mapping, activeEditor, refactoredModel);
			ResourcesPlugin.getWorkspace().run(runnable, null);
			
		} else {
			refactoredModel = null;
		}
		return refactoredModel;
	}
	
	/* (non-Javadoc)
	 * @see org.eclipse.jface.action.Action#run()
	 */
	@Override
	public void run() {
		ResourceSet rs = refactorer.getResource().getResourceSet();
		RefactoringRecordingCommand command = null;
		AbstractTransactionalCommand gmfCommand = null;
		TransactionalEditingDomain domain = null;
		try {
			domain = TransactionUtil.getEditingDomain(rs);
			if(domain == null){
				domain = TransactionalEditingDomain.Factory.INSTANCE.createEditingDomain(rs);
			}
			if(diagramTransactionalEditingDomain != null){
				CommandStack stack = diagramTransactionalEditingDomain.getCommandStack();
				RecordingCommand gmfRecordingCommand = new RefactoringRecordingCommand(diagramTransactionalEditingDomain, refactorer, mapping, activeEditor);
				stack.execute(gmfRecordingCommand);
				
//				ICommand anotherCommand = new SimpleGMFCommand(mapping, refactorer, activeEditor);
//				DiagramCommandStack diagramStack = diagramEditingDomain.getDiagramCommandStack();
//				ICommand tempCommand = new RefactoringRecordingCommand(domain, refactorer, mapping, activeEditor);
//				diagramStack.execute(new ICommandProxy(tempCommand));
				
			} else if(diagramEditingDomain != null){
				if(activeEditor != null){
					IEditorInput input = activeEditor.getEditorInput();
					if(input instanceof FileEditorInput){
						IFile file = ((FileEditorInput) input).getFile();
						URI gmfUri = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
						Resource gmfResource = rs.getResource(gmfUri, true);
						domain = TransactionUtil.getEditingDomain(gmfResource);
					}
				}								
				gmfCommand = new GMFTransactionalCommand(domain, refactorer, mapping, activeEditor);
				
				IStatus result = OperationHistoryFactory.getOperationHistory().execute(gmfCommand, null, null);
//				System.out.println("GMF Result: " + anotherCommand.getCommandResult());
//				diagramStack.execute(gmfCommand);
			} else {
				CommandStack stack = domain.getCommandStack();
				command = new RefactoringRecordingCommand(domain, refactorer, mapping, activeEditor);
				stack.execute(command);
				if(command.didErrorsOccur()){
					if(command.getException() != null){
						throw command.getException();
					}
					throw new Exception("Some instructions couldn't be invoked");
				}
			}
		} catch (Exception e) {
			if(command != null){
				command.undo();
			}
			if(gmfCommand != null){
				try {
					gmfCommand.undo(null, null);
				} catch (ExecutionException e1) {
					RegistryUtil.log("Undo of Refactoring failed", IStatus.ERROR, e);
				}
			}
			RegistryUtil.log("Refactoring rolled back because of the stack trace or message above", IStatus.WARNING, e);
		}
		if(diagramTransactionalEditingDomain != null){
			diagramTransactionalEditingDomain.dispose();
		} else if(domain != null){
			domain.dispose();
		}
	}
}
