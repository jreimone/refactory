epackage rolemapping;

// plain Java imports
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.BasicEList;
 
// import of other EClasses
import roles.Role;
import roles.RoleModifier;

eclass Mapping {
	
	getAllMappedRoles() {
		EList<Role> roles = new BasicEList<Role>();
		EList<ConcreteMapping> mappings = getRoleToMetaelement();
		for (ConcreteMapping concreteMapping : mappings) {
			roles.add(concreteMapping.getRole());
		}
		return roles;
  	}
  	
  	getMappedRolesForEObject() {
		EList<Role> mappedRoles = new BasicEList<Role>();
		EClass metaclass = object.eClass();
		EList<ConcreteMapping> mappings = getRoleToMetaelement();
		for (ConcreteMapping concreteMapping : mappings) {
			Role mappedRole = concreteMapping.getRole();
			EClass mappedClass = concreteMapping.getMetaclass();
			if(mappedClass.equals(metaclass)){
				mappedRoles.add(mappedRole);
			} else if(mappedRole.getModifier().contains(RoleModifier.SUPER)){
				if(mappedClass.isSuperTypeOf(metaclass)){
					mappedRoles.add(mappedRole);
				}
			}
		}
		return mappedRoles;
  	}
  	
  	getEClassForRole(){
  		EList<ConcreteMapping> mappings = getRoleToMetaelement();
		for (ConcreteMapping mapping : mappings) {
			if(mapping.getRole().equals(role)){
				return mapping.getMetaclass();
			}
		}
		return null;
  	}
  	
  	getConcreteMappingForRole(){
  		EList<ConcreteMapping> mappings = getRoleToMetaelement();
		for (ConcreteMapping mapping : mappings) {
			if(mapping.getRole().equals(role)){
				return mapping;
			}
		}
		return null;
  	}
}