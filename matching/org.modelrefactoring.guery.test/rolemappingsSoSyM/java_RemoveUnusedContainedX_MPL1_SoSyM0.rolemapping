"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=EqualityExpressionChild;RemoveeContainer:=EqualityExpression{removees:=children:EqualityExpressionChild;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=ClassMethod{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=WhileLoop{removees:=statement:Statement;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=Constructor{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=SwitchCase{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=Condition{removees:=elseStatement:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=DoWhileLoop{removees:=statement:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=NormalSwitchCase{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=DefaultSwitchCase{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=StatementListContainer{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=TryBlock{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=ForLoop{removees:=statement:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=ForEachLoop{removees:=statement:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=JumpLabel{removees:=statement:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=SynchronizedBlock{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=StatementContainer{removees:=statement:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=CatchBlock{removees:=statements:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=Condition{removees:=statement:Statement;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Statement;RemoveeContainer:=Block{removees:=statements:Statement;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=TypeParametrizable{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=Enumeration{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=ClassMethod{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=AnnotationAttribute{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=InterfaceMethod{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=ConcreteClassifier{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=Method{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=Constructor{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=Annotation{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=Interface{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeParameter;RemoveeContainer:=Class{removees:=typeParameters:TypeParameter;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryOperator;RemoveeContainer:=UnaryExpression{removees:=operators:UnaryOperator;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayInitializer;RemoveeContainer:=ArrayInstantiationByValuesUntyped{removees:=arrayInitializer:ArrayInitializer;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayInitializer;RemoveeContainer:=ArrayInstantiationByValuesTyped{removees:=arrayInitializer:ArrayInitializer;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayInitializer;RemoveeContainer:=ArrayInstantiationByValues{removees:=arrayInitializer:ArrayInitializer;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Parameter;RemoveeContainer:=InterfaceMethod{removees:=parameters:Parameter;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=Parameter;RemoveeContainer:=Parametrizable{removees:=parameters:Parameter;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=Parameter;RemoveeContainer:=AnnotationAttribute{removees:=parameters:Parameter;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Parameter;RemoveeContainer:=Method{removees:=parameters:Parameter;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Parameter;RemoveeContainer:=ClassMethod{removees:=parameters:Parameter;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Parameter;RemoveeContainer:=Constructor{removees:=parameters:Parameter;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=AdditiveOperator;RemoveeContainer:=AdditiveExpression{removees:=additiveOperators:AdditiveOperator;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=InstanceOfExpressionChild;RemoveeContainer:=InstanceOfExpression{removees:=child:InstanceOfExpressionChild;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=SynchronizedBlock{removees:=lockProvider:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Condition{removees:=condition:Expression;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Instantiation{removees:=arguments:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=DoWhileLoop{removees:=condition:Expression;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=LocalVariable{removees:=initialValue:Expression;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=AdditionalLocalVariable{removees:=initialValue:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Throw{removees:=throwable:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ForEachLoop{removees:=collection:Expression;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ArrayInstantiationBySize{removees:=sizes:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Return{removees:=returnValue:Expression;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=NewConstructorCall{removees:=arguments:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Assert{removees:=condition:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Switch{removees:=variable:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ForLoop{removees:=condition:Expression;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Initializable{removees:=initialValue:Expression;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ConditionalExpression{removees:=expressionIf:Expression;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ArraySelector{removees:=position:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ExpressionStatement{removees:=expression:Expression;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ExplicitConstructorCall{removees:=arguments:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Conditional{removees:=condition:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ForLoop{removees:=updates:Expression;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=EnumConstant{removees:=arguments:Expression;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Argumentable{removees:=arguments:Expression;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Field{removees:=initialValue:Expression;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=AnnotationAttribute{removees:=defaultValue:Expression;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=AdditionalField{removees:=initialValue:Expression;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=MethodCall{removees:=arguments:Expression;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=NestedExpression{removees:=expression:Expression;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=ExpressionList{removees:=expressions:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=Assert{removees:=errorMessage:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=NormalSwitchCase{removees:=condition:Expression;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=WhileLoop{removees:=condition:Expression;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=Expression;RemoveeContainer:=AssignmentExpression{removees:=value:Expression;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=MultiplicativeExpressionChild;RemoveeContainer:=CastExpression{removees:=child:MultiplicativeExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=MultiplicativeExpressionChild;RemoveeContainer:=MultiplicativeExpression{removees:=children:MultiplicativeExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ShiftExpressionChild;RemoveeContainer:=ShiftExpression{removees:=children:ShiftExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=RelationExpressionChild;RemoveeContainer:=RelationExpression{removees:=children:RelationExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=AssignmentOperator;RemoveeContainer:=AssignmentExpression{removees:=assignmentOperator:AssignmentOperator;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ConditionalAndExpressionChild;RemoveeContainer:=ConditionalAndExpression{removees:=children:ConditionalAndExpressionChild;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayInitializationValue;RemoveeContainer:=ArrayInitializer{removees:=initialValues:ArrayInitializationValue;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=SelfReference{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ArrayInstantiationBySize{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ArrayInstantiationByValues{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=PrimitiveTypeReference{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=AnnotationInstance{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ElementReference{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ArrayInstantiationByValuesUntyped{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=MethodCall{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=NewConstructorCall{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=Instantiation{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=Reference{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ArrayInstantiation{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=StringReference{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=NestedExpression{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=IdentifierReference{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ArrayInstantiationByValuesTyped{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ExplicitConstructorCall{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=ArraySelector;RemoveeContainer:=ReflectiveClassReference{removees:=arraySelectors:ArraySelector;};}
"RemoveUnusedContainedX for containers" maps <RemoveUnusedContainedX> {Removee:=CompilationUnit;RemoveeContainer:=Package{removees:=compilationUnits:CompilationUnit;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Block;RemoveeContainer:=TryBlock{removees:=finallyBlock:Block;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AdditionalField;RemoveeContainer:=Field{removees:=additionalFields:AdditionalField;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ExclusiveOrExpressionChild;RemoveeContainer:=ExclusiveOrExpression{removees:=children:ExclusiveOrExpressionChild;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=AnnotationValue;RemoveeContainer:=AnnotationAttributeSetting{removees:=value:AnnotationValue;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=AnnotationValue;RemoveeContainer:=SingleAnnotationParameter{removees:=value:AnnotationValue;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=PackageReference;RemoveeContainer:=PackageReference{removees:=subpackages:PackageReference;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=Instantiation{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ArrayInstantiationByValues{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=StringReference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ReflectiveClassReference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ArrayInstantiationBySize{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ElementReference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=Parameter{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=VariableLengthParameter{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for types" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ClassifierReference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ExplicitConstructorCall{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=NewConstructorCall{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=AnnotationInstance{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=OrdinaryParameter{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=TypeArgumentable{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ArrayInstantiationByValuesUntyped{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ArrayInstantiation{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=NewConstructorCall{removees:=callTypeArguments:TypeArgument;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=Field{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=NestedExpression{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=MethodCall{removees:=callTypeArguments:TypeArgument;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=ArrayInstantiationByValuesTyped{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=SelfReference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=PrimitiveTypeReference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=Variable{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=Reference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=MethodCall{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=IdentifierReference{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=CallTypeArgumentable{removees:=callTypeArguments:TypeArgument;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=TypeArgument;RemoveeContainer:=LocalVariable{removees:=typeArguments:TypeArgument;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=OrdinaryParameter{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for types" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=TypedElement{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Class{removees:=implements:TypeReference;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Interface{removees:=extends:TypeReference;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=CastExpression{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=NewConstructorCall{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Implementor{removees:=implements:TypeReference;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=TypeParameter{removees:=extendTypes:TypeReference;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=InstanceOfExpression{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=ClassMethod{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=InterfaceMethod{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=AnnotationAttribute{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Parameter{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Field{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=VariableLengthParameter{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Class{removees:=defaultExtends:TypeReference;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Interface{removees:=defaultExtends:TypeReference;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=QualifiedTypeArgument{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=ArrayInstantiationByValuesTyped{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Class{removees:=extends:TypeReference;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=LocalVariable{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Variable{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=ArrayInstantiationBySize{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=SuperTypeArgument{removees:=superType:TypeReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Method{removees:=typeReference:TypeReference;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=ExtendsTypeArgument{removees:=extendTypes:TypeReference;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=TypeReference;RemoveeContainer:=Enumeration{removees:=implements:TypeReference;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=SwitchCase;RemoveeContainer:=Switch{removees:=cases:SwitchCase;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=EqualityOperator;RemoveeContainer:=EqualityExpression{removees:=equalityOperators:EqualityOperator;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ConditionalOrExpressionChild;RemoveeContainer:=ConditionalOrExpression{removees:=children:ConditionalOrExpressionChild;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=PrimitiveType;RemoveeContainer:=PrimitiveTypeReference{removees:=primitiveType:PrimitiveType;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=AnnotationAttributeSetting;RemoveeContainer:=AnnotationParameterList{removees:=settings:AnnotationAttributeSetting;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=AndExpressionChild;RemoveeContainer:=AndExpression{removees:=children:AndExpressionChild;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Annotation{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=OrdinaryParameter{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Class{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Field{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Method{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=ConcreteClassifier{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=VariableLengthParameter{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Enumeration{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=LocalVariable{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=AnnotationAttribute{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for modifiers" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=AnnotableAndModifiable{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=InterfaceMethod{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Constructor{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Interface{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=ClassMethod{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstanceOrModifier;RemoveeContainer:=Parameter{removees:=annotationsAndModifiers:AnnotationInstanceOrModifier;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=AssignmentExpressionChild;RemoveeContainer:=ConditionalExpression{removees:=expressionElse:AssignmentExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=AssignmentExpressionChild;RemoveeContainer:=AssignmentExpression{removees:=child:AssignmentExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryModificationOperator;RemoveeContainer:=SuffixUnaryModificationExpression{removees:=operator:UnaryModificationOperator;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryModificationOperator;RemoveeContainer:=UnaryModificationExpression{removees:=operator:UnaryModificationOperator;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryModificationOperator;RemoveeContainer:=PrefixUnaryModificationExpression{removees:=operator:UnaryModificationOperator;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ConditionalExpressionChild;RemoveeContainer:=ConditionalExpression{removees:=child:ConditionalExpressionChild;};}
"RemoveUnusedContainedX for containers" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstance;RemoveeContainer:=Package{removees:=annotations:AnnotationInstance;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstance;RemoveeContainer:=EnumConstant{removees:=annotations:AnnotationInstance;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=AnnotationInstance;RemoveeContainer:=Annotable{removees:=annotations:AnnotationInstance;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryExpressionChild;RemoveeContainer:=UnaryExpression{removees:=child:UnaryExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ShiftOperator;RemoveeContainer:=ShiftExpression{removees:=shiftOperators:ShiftOperator;};}
"RemoveUnusedContainedX for modifiers" maps <RemoveUnusedContainedX> {Removee:=Modifier;RemoveeContainer:=Modifiable{removees:=modifiers:Modifier;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=Modifier;RemoveeContainer:=Block{removees:=modifiers:Modifier;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=InterfaceMethod{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ArrayInstantiationByValuesTyped{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=VariableLengthParameter{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ClassMethod{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Method{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=OrdinaryParameter{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Field{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Variable{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=InterfaceMethod{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ArrayTypeable{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=UnknownTypeArgument{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ClassMethod{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=CastExpression{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=TypeArgument{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=AdditionalField{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ExtendsTypeArgument{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Method{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Field{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=InstanceOfExpression{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=InstanceOfExpression{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=UnknownTypeArgument{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=OrdinaryParameter{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Parameter{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=TypeArgument{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=CastExpression{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=AdditionalLocalVariable{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Parameter{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=QualifiedTypeArgument{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for parameters" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=VariableLengthParameter{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=AdditionalLocalVariable{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=AdditionalField{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ArrayInstantiationBySize{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=QualifiedTypeArgument{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=SuperTypeArgument{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ArrayInstantiationByValuesTyped{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=LocalVariable{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=AnnotationAttribute{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ExtendsTypeArgument{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=LocalVariable{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=Variable{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ArrayInstantiationBySize{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=ArrayTypeable{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=AnnotationAttribute{removees:=arrayDimensionsAfter:ArrayDimension;};}
"RemoveUnusedContainedX for generics" maps <RemoveUnusedContainedX> {Removee:=ArrayDimension;RemoveeContainer:=SuperTypeArgument{removees:=arrayDimensionsBefore:ArrayDimension;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Self;RemoveeContainer:=ExplicitConstructorCall{removees:=callTarget:Self;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Self;RemoveeContainer:=SelfReference{removees:=self:Self;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=CatchBlock;RemoveeContainer:=TryBlock{removees:=catcheBlocks:CatchBlock;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=NamespaceClassifierReference;RemoveeContainer:=Constructor{removees:=exceptions:NamespaceClassifierReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=NamespaceClassifierReference;RemoveeContainer:=ClassMethod{removees:=exceptions:NamespaceClassifierReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=NamespaceClassifierReference;RemoveeContainer:=ExceptionThrower{removees:=exceptions:NamespaceClassifierReference;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=NamespaceClassifierReference;RemoveeContainer:=AnnotationAttribute{removees:=exceptions:NamespaceClassifierReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=NamespaceClassifierReference;RemoveeContainer:=Method{removees:=exceptions:NamespaceClassifierReference;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=NamespaceClassifierReference;RemoveeContainer:=InterfaceMethod{removees:=exceptions:NamespaceClassifierReference;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=MultiplicativeOperator;RemoveeContainer:=MultiplicativeExpression{removees:=multiplicativeOperators:MultiplicativeOperator;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=PrimitiveTypeReference{removees:=next:Reference;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=SelfReference{removees:=next:Reference;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=MethodCall{removees:=next:Reference;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ReflectiveClassReference{removees:=next:Reference;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ElementReference{removees:=next:Reference;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ArrayInstantiationBySize{removees:=next:Reference;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ArrayInstantiation{removees:=next:Reference;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=NewConstructorCall{removees:=next:Reference;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ArrayInstantiationByValuesTyped{removees:=next:Reference;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=Reference{removees:=next:Reference;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ArrayInstantiationByValues{removees:=next:Reference;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=NestedExpression{removees:=next:Reference;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ExplicitConstructorCall{removees:=next:Reference;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=Instantiation{removees:=next:Reference;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=IdentifierReference{removees:=next:Reference;};}
"RemoveUnusedContainedX for references" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=StringReference{removees:=next:Reference;};}
"RemoveUnusedContainedX for arrays" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=ArrayInstantiationByValuesUntyped{removees:=next:Reference;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=Reference;RemoveeContainer:=AnnotationInstance{removees:=next:Reference;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=ForLoopInitializer;RemoveeContainer:=ForLoop{removees:=init:ForLoopInitializer;};}
"RemoveUnusedContainedX for instantiations" maps <RemoveUnusedContainedX> {Removee:=AnonymousClass;RemoveeContainer:=NewConstructorCall{removees:=anonymousClass:AnonymousClass;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=AnonymousClass;RemoveeContainer:=EnumConstant{removees:=anonymousClass:AnonymousClass;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=OrdinaryParameter;RemoveeContainer:=CatchBlock{removees:=parameter:OrdinaryParameter;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=OrdinaryParameter;RemoveeContainer:=ForEachLoop{removees:=next:OrdinaryParameter;};}
"RemoveUnusedContainedX for containers" maps <RemoveUnusedContainedX> {Removee:=ConcreteClassifier;RemoveeContainer:=CompilationUnit{removees:=classifiers:ConcreteClassifier;};}
"RemoveUnusedContainedX for containers" maps <RemoveUnusedContainedX> {Removee:=Import;RemoveeContainer:=JavaRoot{removees:=imports:Import;};}
"RemoveUnusedContainedX for containers" maps <RemoveUnusedContainedX> {Removee:=Import;RemoveeContainer:=EmptyModel{removees:=imports:Import;};}
"RemoveUnusedContainedX for imports" maps <RemoveUnusedContainedX> {Removee:=Import;RemoveeContainer:=ImportingElement{removees:=imports:Import;};}
"RemoveUnusedContainedX for containers" maps <RemoveUnusedContainedX> {Removee:=Import;RemoveeContainer:=CompilationUnit{removees:=imports:Import;};}
"RemoveUnusedContainedX for containers" maps <RemoveUnusedContainedX> {Removee:=Import;RemoveeContainer:=Package{removees:=imports:Import;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=AdditiveExpressionChild;RemoveeContainer:=AdditiveExpression{removees:=children:AdditiveExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=InclusiveOrExpressionChild;RemoveeContainer:=InclusiveOrExpression{removees:=children:InclusiveOrExpressionChild;};}
"RemoveUnusedContainedX for variables" maps <RemoveUnusedContainedX> {Removee:=AdditionalLocalVariable;RemoveeContainer:=LocalVariable{removees:=additionalLocalVariables:AdditionalLocalVariable;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=RelationOperator;RemoveeContainer:=RelationExpression{removees:=relationOperators:RelationOperator;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Interface{removees:=defaultMembers:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=AnonymousClass{removees:=defaultMembers:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Enumeration{removees:=defaultMembers:Member;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=MemberContainer{removees:=defaultMembers:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Annotation{removees:=defaultMembers:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=ConcreteClassifier{removees:=defaultMembers:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Annotation{removees:=members:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=AnonymousClass{removees:=members:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=ConcreteClassifier{removees:=members:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Enumeration{removees:=members:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Class{removees:=defaultMembers:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Interface{removees:=members:Member;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=Class{removees:=members:Member;};}
"RemoveUnusedContainedX for members" maps <RemoveUnusedContainedX> {Removee:=Member;RemoveeContainer:=MemberContainer{removees:=members:Member;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryModificationExpressionChild;RemoveeContainer:=PrefixUnaryModificationExpression{removees:=child:UnaryModificationExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryModificationExpressionChild;RemoveeContainer:=SuffixUnaryModificationExpression{removees:=child:UnaryModificationExpressionChild;};}
"RemoveUnusedContainedX for expressions" maps <RemoveUnusedContainedX> {Removee:=UnaryModificationExpressionChild;RemoveeContainer:=UnaryModificationExpression{removees:=child:UnaryModificationExpressionChild;};}
"RemoveUnusedContainedX for statements" maps <RemoveUnusedContainedX> {Removee:=LocalVariable;RemoveeContainer:=LocalVariableStatement{removees:=variable:LocalVariable;};}
"RemoveUnusedContainedX for classifiers" maps <RemoveUnusedContainedX> {Removee:=EnumConstant;RemoveeContainer:=Enumeration{removees:=constants:EnumConstant;};}
"RemoveUnusedContainedX for annotations" maps <RemoveUnusedContainedX> {Removee:=AnnotationParameter;RemoveeContainer:=AnnotationInstance{removees:=parameter:AnnotationParameter;};}
"RemoveUnusedContainedX for types" maps <RemoveUnusedContainedX> {Removee:=ClassifierReference;RemoveeContainer:=NamespaceClassifierReference{removees:=classifierReferences:ClassifierReference;};}
"RemoveUnusedContainedX for imports" maps <RemoveUnusedContainedX> {Removee:=Static;RemoveeContainer:=StaticMemberImport{removees:=static:Static;};}
"RemoveUnusedContainedX for imports" maps <RemoveUnusedContainedX> {Removee:=Static;RemoveeContainer:=StaticClassifierImport{removees:=static:Static;};}
"RemoveUnusedContainedX for imports" maps <RemoveUnusedContainedX> {Removee:=Static;RemoveeContainer:=StaticImport{removees:=static:Static;};}
