ROLEMODELMAPPING FOR <http://www.emftext.org/sdk/concretesyntax>

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EStructuralFeature {
		extracts := eGenericType:EGenericType;
		referer := eGenericType:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eStructuralFeatures:EStructuralFeature;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EStructuralFeature {
		extracts := eAnnotations:EAnnotation;
		referer := eGenericType:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EClass {
		source := eStructuralFeatures:EStructuralFeature;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingSpecifiedToken;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:TokenRedefinition;
	};
	MovedReference := PlaceholderUsingSpecifiedToken {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingSpecifiedToken;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := PlaceholderUsingSpecifiedToken {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingSpecifiedToken;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := PlaceholderUsingSpecifiedToken {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingSpecifiedToken;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := PlaceholderUsingSpecifiedToken {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:Placeholder;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:TokenRedefinition;
	};
	MovedReference := Placeholder {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:Placeholder;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := Placeholder {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:Placeholder;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := Placeholder {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:Placeholder;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := Placeholder {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingDefaultToken;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:TokenRedefinition;
	};
	MovedReference := PlaceholderUsingDefaultToken {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingDefaultToken;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := PlaceholderUsingDefaultToken {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingDefaultToken;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := PlaceholderUsingDefaultToken {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderUsingDefaultToken;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := PlaceholderUsingDefaultToken {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderInQuotes;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:TokenRedefinition;
	};
	MovedReference := PlaceholderInQuotes {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderInQuotes;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := PlaceholderInQuotes {
		containerRef := token:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderInQuotes;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := PlaceholderInQuotes {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := Rule {
		extracts := annotations:Annotation;
		referer := children:PlaceholderInQuotes;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := rules:Rule;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := PlaceholderInQuotes {
		containerRef := token:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EPackage {
		extracts := eClassifiers:EClassifier;
		referer := eClassifiers:EClassifier;
	};
	Extract := EClassifier;
	NewContainer := EPackage {
		moved := eClassifiers:EClassifier;
	};
	ContainerContainer := EPackage {
		source := eSubpackages:EPackage;
		target := eSubpackages:EPackage;
	};
	MovedReference := EClassifier {
		containerRef := ePackage:EPackage;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EPackage {
		extracts := eClassifiers:EClassifier;
		referer := eSubpackages:EPackage;
	};
	Extract := EClassifier;
	NewContainer := EPackage {
		moved := eClassifiers:EClassifier;
	};
	ContainerContainer := EPackage {
		source := eSubpackages:EPackage;
		target := eSubpackages:EPackage;
	};
	MovedReference := EPackage {
		containerRef := eSuperPackage:EPackage;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EPackage {
		extracts := eSubpackages:EPackage;
		referer := eClassifiers:EClassifier;
	};
	Extract := EPackage;
	NewContainer := EPackage {
		moved := eSubpackages:EPackage;
	};
	ContainerContainer := EPackage {
		source := eSubpackages:EPackage;
		target := eSubpackages:EPackage;
	};
	MovedReference := EClassifier {
		containerRef := ePackage:EPackage;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EPackage {
		extracts := eSubpackages:EPackage;
		referer := eSubpackages:EPackage;
	};
	Extract := EPackage;
	NewContainer := EPackage {
		moved := eSubpackages:EPackage;
	};
	ContainerContainer := EPackage {
		source := eSubpackages:EPackage;
		target := eSubpackages:EPackage;
	};
	MovedReference := EPackage {
		containerRef := eSuperPackage:EPackage;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EPackage {
		extracts := eAnnotations:EAnnotation;
		referer := eClassifiers:EClassifier;
	};
	Extract := EAnnotation;
	NewContainer := EPackage {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EPackage {
		source := eSubpackages:EPackage;
		target := eSubpackages:EPackage;
	};
	MovedReference := EClassifier {
		containerRef := ePackage:EPackage;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EPackage {
		extracts := eAnnotations:EAnnotation;
		referer := eSubpackages:EPackage;
	};
	Extract := EAnnotation;
	NewContainer := EPackage {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EPackage {
		source := eSubpackages:EPackage;
		target := eSubpackages:EPackage;
	};
	MovedReference := EPackage {
		containerRef := eSuperPackage:EPackage;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := NormalTokenDefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:NormalTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenEnum {
		extracts := genAnnotations:GenAnnotation;
		referer := genEnumLiterals:GenEnumLiteral;
	};
	Extract := GenAnnotation;
	NewContainer := GenEnum {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenPackage {
		source := genEnums:GenEnum;
		target := genEnums:GenEnum;
	};
	MovedReference := GenEnumLiteral {
		containerRef := genEnum:GenEnum;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenEnum {
		extracts := genTypeParameters:GenTypeParameter;
		referer := genEnumLiterals:GenEnumLiteral;
	};
	Extract := GenTypeParameter;
	NewContainer := GenEnum {
		moved := genTypeParameters:GenTypeParameter;
	};
	ContainerContainer := GenPackage {
		source := genEnums:GenEnum;
		target := genEnums:GenEnum;
	};
	MovedReference := GenEnumLiteral {
		containerRef := genEnum:GenEnum;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenEnum {
		extracts := genEnumLiterals:GenEnumLiteral;
		referer := genEnumLiterals:GenEnumLiteral;
	};
	Extract := GenEnumLiteral;
	NewContainer := GenEnum {
		moved := genEnumLiterals:GenEnumLiteral;
	};
	ContainerContainer := GenPackage {
		source := genEnums:GenEnum;
		target := genEnums:GenEnum;
	};
	MovedReference := GenEnumLiteral {
		containerRef := genEnum:GenEnum;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eBounds:EGenericType;
		referer := eBounds:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eBounds:EGenericType;
		referer := eBounds:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eBounds:EGenericType;
		referer := eBounds:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClassifier {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eBounds:EGenericType;
		referer := eBounds:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EEnum {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eBounds:EGenericType;
		referer := eBounds:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EDataType {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eAnnotations:EAnnotation;
		referer := eBounds:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EClass {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eAnnotations:EAnnotation;
		referer := eBounds:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EOperation {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eAnnotations:EAnnotation;
		referer := eBounds:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EClassifier {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eAnnotations:EAnnotation;
		referer := eBounds:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EEnum {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := ETypeParameter {
		extracts := eAnnotations:EAnnotation;
		referer := eBounds:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EDataType {
		source := eTypeParameters:ETypeParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenOperation {
		extracts := genAnnotations:GenAnnotation;
		referer := genParameters:GenParameter;
	};
	Extract := GenAnnotation;
	NewContainer := GenOperation {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenClass {
		source := genOperations:GenOperation;
		target := genOperations:GenOperation;
	};
	MovedReference := GenParameter {
		containerRef := genOperation:GenOperation;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenOperation {
		extracts := genParameters:GenParameter;
		referer := genParameters:GenParameter;
	};
	Extract := GenParameter;
	NewContainer := GenOperation {
		moved := genParameters:GenParameter;
	};
	ContainerContainer := GenClass {
		source := genOperations:GenOperation;
		target := genOperations:GenOperation;
	};
	MovedReference := GenParameter {
		containerRef := genOperation:GenOperation;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenOperation {
		extracts := genTypeParameters:GenTypeParameter;
		referer := genParameters:GenParameter;
	};
	Extract := GenTypeParameter;
	NewContainer := GenOperation {
		moved := genTypeParameters:GenTypeParameter;
	};
	ContainerContainer := GenClass {
		source := genOperations:GenOperation;
		target := genOperations:GenOperation;
	};
	MovedReference := GenParameter {
		containerRef := genOperation:GenOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EParameter {
		extracts := eGenericType:EGenericType;
		referer := eGenericType:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eParameters:EParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EParameter {
		extracts := eAnnotations:EAnnotation;
		referer := eGenericType:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EOperation {
		source := eParameters:EParameter;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := PartialTokenDefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:PartialTokenDefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := nestedGenPackages:GenPackage;
		referer := genClasses:GenClass;
	};
	Extract := GenPackage;
	NewContainer := GenPackage {
		moved := nestedGenPackages:GenPackage;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := nestedGenPackages:GenPackage;
		referer := genClasses:GenClass;
	};
	Extract := GenPackage;
	NewContainer := GenPackage {
		moved := nestedGenPackages:GenPackage;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := nestedGenPackages:GenPackage;
		referer := genEnums:GenEnum;
	};
	Extract := GenPackage;
	NewContainer := GenPackage {
		moved := nestedGenPackages:GenPackage;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := nestedGenPackages:GenPackage;
		referer := genEnums:GenEnum;
	};
	Extract := GenPackage;
	NewContainer := GenPackage {
		moved := nestedGenPackages:GenPackage;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := nestedGenPackages:GenPackage;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenPackage;
	NewContainer := GenPackage {
		moved := nestedGenPackages:GenPackage;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := nestedGenPackages:GenPackage;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenPackage;
	NewContainer := GenPackage {
		moved := nestedGenPackages:GenPackage;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genClasses:GenClass;
		referer := genClasses:GenClass;
	};
	Extract := GenClass;
	NewContainer := GenPackage {
		moved := genClasses:GenClass;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genClasses:GenClass;
		referer := genClasses:GenClass;
	};
	Extract := GenClass;
	NewContainer := GenPackage {
		moved := genClasses:GenClass;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genClasses:GenClass;
		referer := genEnums:GenEnum;
	};
	Extract := GenClass;
	NewContainer := GenPackage {
		moved := genClasses:GenClass;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genClasses:GenClass;
		referer := genEnums:GenEnum;
	};
	Extract := GenClass;
	NewContainer := GenPackage {
		moved := genClasses:GenClass;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genClasses:GenClass;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenClass;
	NewContainer := GenPackage {
		moved := genClasses:GenClass;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genClasses:GenClass;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenClass;
	NewContainer := GenPackage {
		moved := genClasses:GenClass;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genAnnotations:GenAnnotation;
		referer := genClasses:GenClass;
	};
	Extract := GenAnnotation;
	NewContainer := GenPackage {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genAnnotations:GenAnnotation;
		referer := genClasses:GenClass;
	};
	Extract := GenAnnotation;
	NewContainer := GenPackage {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genAnnotations:GenAnnotation;
		referer := genEnums:GenEnum;
	};
	Extract := GenAnnotation;
	NewContainer := GenPackage {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genAnnotations:GenAnnotation;
		referer := genEnums:GenEnum;
	};
	Extract := GenAnnotation;
	NewContainer := GenPackage {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genAnnotations:GenAnnotation;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenAnnotation;
	NewContainer := GenPackage {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genAnnotations:GenAnnotation;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenAnnotation;
	NewContainer := GenPackage {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genEnums:GenEnum;
		referer := genClasses:GenClass;
	};
	Extract := GenEnum;
	NewContainer := GenPackage {
		moved := genEnums:GenEnum;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genEnums:GenEnum;
		referer := genClasses:GenClass;
	};
	Extract := GenEnum;
	NewContainer := GenPackage {
		moved := genEnums:GenEnum;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genEnums:GenEnum;
		referer := genEnums:GenEnum;
	};
	Extract := GenEnum;
	NewContainer := GenPackage {
		moved := genEnums:GenEnum;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genEnums:GenEnum;
		referer := genEnums:GenEnum;
	};
	Extract := GenEnum;
	NewContainer := GenPackage {
		moved := genEnums:GenEnum;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genEnums:GenEnum;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenEnum;
	NewContainer := GenPackage {
		moved := genEnums:GenEnum;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genEnums:GenEnum;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenEnum;
	NewContainer := GenPackage {
		moved := genEnums:GenEnum;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genDataTypes:GenDataType;
		referer := genClasses:GenClass;
	};
	Extract := GenDataType;
	NewContainer := GenPackage {
		moved := genDataTypes:GenDataType;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genDataTypes:GenDataType;
		referer := genClasses:GenClass;
	};
	Extract := GenDataType;
	NewContainer := GenPackage {
		moved := genDataTypes:GenDataType;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenClass {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genDataTypes:GenDataType;
		referer := genEnums:GenEnum;
	};
	Extract := GenDataType;
	NewContainer := GenPackage {
		moved := genDataTypes:GenDataType;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genDataTypes:GenDataType;
		referer := genEnums:GenEnum;
	};
	Extract := GenDataType;
	NewContainer := GenPackage {
		moved := genDataTypes:GenDataType;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenEnum {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genDataTypes:GenDataType;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenDataType;
	NewContainer := GenPackage {
		moved := genDataTypes:GenDataType;
	};
	ContainerContainer := GenPackage {
		source := nestedGenPackages:GenPackage;
		target := nestedGenPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenPackage {
		extracts := genDataTypes:GenDataType;
		referer := genDataTypes:GenDataType;
	};
	Extract := GenDataType;
	NewContainer := GenPackage {
		moved := genDataTypes:GenDataType;
	};
	ContainerContainer := GenModel {
		source := genPackages:GenPackage;
		target := genPackages:GenPackage;
	};
	MovedReference := GenDataType {
		containerRef := genPackage:GenPackage;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexReference;
		referer := regexParts:RegexReference;
	};
	Extract := RegexReference;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexReference;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := TokenRedefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:AtomicRegex;
		referer := regexParts:RegexReference;
	};
	Extract := AtomicRegex;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:AtomicRegex;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := TokenRedefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := annotations:Annotation;
		referer := regexParts:RegexReference;
	};
	Extract := Annotation;
	NewContainer := NormalTokenDefinition {
		moved := annotations:Annotation;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := NormalTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:NormalTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:NormalTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := PartialTokenDefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:PartialTokenDefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:PartialTokenDefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := tokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := syntheticTokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for concretesyntax" maps <ExtractXwithReferenceClass> {
	OrigContainer := TokenRedefinition {
		extracts := regexParts:RegexPart;
		referer := regexParts:RegexReference;
	};
	Extract := RegexPart;
	NewContainer := TokenRedefinition {
		moved := regexParts:RegexPart;
	};
	ContainerContainer := ConcreteSyntax {
		source := tokens:TokenRedefinition;
		target := syntheticTokens:TokenRedefinition;
	};
	MovedReference := RegexReference {
		containerRef := target:TokenRedefinition;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genFeatures:GenFeature;
		referer := genFeatures:GenFeature;
	};
	Extract := GenFeature;
	NewContainer := GenClass {
		moved := genFeatures:GenFeature;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenFeature {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genFeatures:GenFeature;
		referer := genOperations:GenOperation;
	};
	Extract := GenFeature;
	NewContainer := GenClass {
		moved := genFeatures:GenFeature;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenOperation {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genTypeParameters:GenTypeParameter;
		referer := genFeatures:GenFeature;
	};
	Extract := GenTypeParameter;
	NewContainer := GenClass {
		moved := genTypeParameters:GenTypeParameter;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenFeature {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genTypeParameters:GenTypeParameter;
		referer := genOperations:GenOperation;
	};
	Extract := GenTypeParameter;
	NewContainer := GenClass {
		moved := genTypeParameters:GenTypeParameter;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenOperation {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genOperations:GenOperation;
		referer := genFeatures:GenFeature;
	};
	Extract := GenOperation;
	NewContainer := GenClass {
		moved := genOperations:GenOperation;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenFeature {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genOperations:GenOperation;
		referer := genOperations:GenOperation;
	};
	Extract := GenOperation;
	NewContainer := GenClass {
		moved := genOperations:GenOperation;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenOperation {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genAnnotations:GenAnnotation;
		referer := genFeatures:GenFeature;
	};
	Extract := GenAnnotation;
	NewContainer := GenClass {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenFeature {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for genmodel" maps <ExtractXwithReferenceClass> {
	OrigContainer := GenClass {
		extracts := genAnnotations:GenAnnotation;
		referer := genOperations:GenOperation;
	};
	Extract := GenAnnotation;
	NewContainer := GenClass {
		moved := genAnnotations:GenAnnotation;
	};
	ContainerContainer := GenPackage {
		source := genClasses:GenClass;
		target := genClasses:GenClass;
	};
	MovedReference := GenOperation {
		containerRef := genClass:GenClass;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eParameters:EParameter;
		referer := eParameters:EParameter;
	};
	Extract := EParameter;
	NewContainer := EOperation {
		moved := eParameters:EParameter;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eOperations:EOperation;
	};
	MovedReference := EParameter {
		containerRef := eOperation:EOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eTypeParameters:ETypeParameter;
		referer := eParameters:EParameter;
	};
	Extract := ETypeParameter;
	NewContainer := EOperation {
		moved := eTypeParameters:ETypeParameter;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eOperations:EOperation;
	};
	MovedReference := EParameter {
		containerRef := eOperation:EOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericType:EGenericType;
		referer := eParameters:EParameter;
	};
	Extract := EGenericType;
	NewContainer := EOperation {
		moved := eGenericType:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eOperations:EOperation;
	};
	MovedReference := EParameter {
		containerRef := eOperation:EOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericType:EGenericType;
		referer := eParameters:EParameter;
	};
	Extract := EGenericType;
	NewContainer := EOperation {
		moved := eGenericExceptions:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eOperations:EOperation;
	};
	MovedReference := EParameter {
		containerRef := eOperation:EOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericType:EGenericType;
		referer := eGenericType:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericType:EGenericType;
		referer := eGenericExceptions:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericExceptions:EGenericType;
		referer := eParameters:EParameter;
	};
	Extract := EGenericType;
	NewContainer := EOperation {
		moved := eGenericType:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eOperations:EOperation;
	};
	MovedReference := EParameter {
		containerRef := eOperation:EOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericExceptions:EGenericType;
		referer := eParameters:EParameter;
	};
	Extract := EGenericType;
	NewContainer := EOperation {
		moved := eGenericExceptions:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eOperations:EOperation;
	};
	MovedReference := EParameter {
		containerRef := eOperation:EOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericExceptions:EGenericType;
		referer := eGenericType:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eGenericExceptions:EGenericType;
		referer := eGenericExceptions:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eAnnotations:EAnnotation;
		referer := eParameters:EParameter;
	};
	Extract := EAnnotation;
	NewContainer := EOperation {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eOperations:EOperation;
	};
	MovedReference := EParameter {
		containerRef := eOperation:EOperation;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eAnnotations:EAnnotation;
		referer := eGenericType:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EOperation {
		extracts := eAnnotations:EAnnotation;
		referer := eGenericExceptions:EGenericType;
	};
	Extract := EAnnotation;
	NewContainer := ETypeParameter {
		moved := eAnnotations:EAnnotation;
	};
	ContainerContainer := EClass {
		source := eOperations:EOperation;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eLowerBound:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eUpperBound:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eLowerBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eUpperBound:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EClass {
		source := eGenericSuperTypes:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericType:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

"ExtractXwithReferenceClass for ecore" maps <ExtractXwithReferenceClass> {
	OrigContainer := EGenericType {
		extracts := eTypeArguments:EGenericType;
		referer := eTypeArguments:EGenericType;
	};
	Extract := EGenericType;
	NewContainer := ETypeParameter {
		moved := eBounds:EGenericType;
	};
	ContainerContainer := EOperation {
		source := eGenericExceptions:EGenericType;
		target := eTypeParameters:ETypeParameter;
	};
	MovedReference := EGenericType {
		containerRef := eTypeParameter:ETypeParameter;
	};
	
	
}

