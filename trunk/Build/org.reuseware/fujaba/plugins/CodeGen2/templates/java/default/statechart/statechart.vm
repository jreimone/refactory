### TypeOf[ ${elem} ] := de.uni_paderborn.fujaba.uml.behavior.UMLStatechart
### TypeOf[ ${children} ] := java.lang.String
### TypeOf[ ${transitions} ] := java.lang.String
### TypeOf[ ${methods} ] := java.lang.String
### TypeOf[ ${utility} ] := de.uni_kassel.fujaba.codegen.Utility
#set( $statechart = $elem )
#set( $name = $statechart.Name )
#set( $theClass = $statechart.ParentElement )
### TypeOf[ ${theClass} ] := de.uni_paderborn.fujaba.metamodel.structure.FClass
#set( $className = $theClass.Name )
#set( $statechartClassConstructor = $theClass.getFromMethodsByShortName($className) )
#set( $return = $imports.addToImports("de.upb.tools.sdm.*") )
#set( $children = $utility.indent("   ",$!children) )
#set( $transitions = $utility.indent("   ",$!transitions) )

#if( !$statechartClassConstructor )
public ${className}()
{
   initStateChart ();
}

#end
private FReactive myFReactive;

public boolean alwaysTrue()
{
   return true;
}
   
public synchronized void notifyMe()
{
   notify ();
}

public synchronized void waitForResultForEvent(FEvent event)
{
   while (!event.getHasResult ())
   {
      try
      {
         wait ();
      }
      catch (InterruptedException e) {}
   }
}
   
public void initStateChart()
{
   myFReactive = new FReactive ();
   myFReactive.setHandler (this);
   FComplexState $name = myFReactive.makeComplexState ("$name", null, null, null);
   myFReactive.setCurrent ($name);
$!children##
$!transitions##
   myFReactive.enqueueEvent (new FEvent (FReactive.INIT_EVENT_PREFIX + "$name" ), FReactive.INTERNAL_EVENT);
##TODo seen '+ "A"'???
#if( $statechart.isSpawningOwnThread() )
   myFReactive.start ();
#end
}

$!methods##
