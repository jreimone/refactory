package org.emftext.refactoring.languages.java.smell.android

import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/parameters"
import "http://www.emftext.org/java/types"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/variables"
import "http://www.emftext.org/java/statements"


pattern rigidAlarmManager(repeatingExpression:MethodCall) = {
	Class.^extends(actualClass, superClassRef);
	NamespaceClassifierReference.classifierReferences(superClassRef, classifierReference);
	ClassifierReference.target(classifierReference, superClass);
	Class.name(superClass, "Activity");
	Class.members(actualClass, anyMethod);
//	ClassMethod.name(anyMethod, "onCreate");

	ExpressionStatement.expression(bindingStatement, alarmIdentifier);
	IdentifierReference.target(alarmIdentifier, alarmIdentifierReference);
	IdentifierReference.next(alarmIdentifier, repeatingExpression);
	MethodCall.target.name(repeatingExpression, "setRepeating");

	LocalVariable.typeReference(alarmIdentifierReference, alarmReferenceClassfier);
	NamespaceClassifierReference.classifierReferences.target.name(alarmReferenceClassfier, "AlarmManager");

	find parentContainsBindingExpression_rig+(anyMethod, bindingStatement);
}

private pattern parentContainsBindingExpression_rig(parent, child) = {
	StatementListContainer.statements(parent, child);
} or {
	ExpressionStatement.expression(parent, child);
} or {
	StatementContainer.statement(parent, child);
}
