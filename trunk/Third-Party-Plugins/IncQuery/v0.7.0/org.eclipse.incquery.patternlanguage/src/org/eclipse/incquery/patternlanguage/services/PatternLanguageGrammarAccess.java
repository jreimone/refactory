/*
* generated by Xtext
*/
package org.eclipse.incquery.patternlanguage.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class PatternLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PatternModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cPackageNameAssignment_0_1.eContents().get(0);
		private final Assignment cPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternsPatternParserRuleCall_1_0 = (RuleCall)cPatternsAssignment_1.eContents().get(0);
		
		//PatternModel:
		//	("package" packageName=QualifiedName)? patterns+=Pattern*;
		public ParserRule getRule() { return rule; }

		//("package" packageName=QualifiedName)? patterns+=Pattern*
		public Group getGroup() { return cGroup; }

		//("package" packageName=QualifiedName)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_0_1() { return cPackageNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_0_1_0() { return cPackageNameQualifiedNameParserRuleCall_0_1_0; }

		//patterns+=Pattern*
		public Assignment getPatternsAssignment_1() { return cPatternsAssignment_1; }

		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_1_0() { return cPatternsPatternParserRuleCall_1_0; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifiersParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		private final Keyword cPatternKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodiesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodiesPatternBodyParserRuleCall_8_0 = (RuleCall)cBodiesAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cOrKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cBodiesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cBodiesPatternBodyParserRuleCall_9_1_0 = (RuleCall)cBodiesAssignment_9_1.eContents().get(0);
		
		//Pattern:
		//	annotations+=Annotation* modifiers+=Modifiers* "pattern" name=ID "(" (parameters+=Parameter (","
		//	parameters+=Parameter)*)? ")" "="? bodies+=PatternBody ("or" bodies+=PatternBody)*;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* modifiers+=Modifiers* "pattern" name=ID "(" (parameters+=Parameter (","
		//parameters+=Parameter)*)? ")" "="? bodies+=PatternBody ("or" bodies+=PatternBody)*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//modifiers+=Modifiers*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }

		//Modifiers
		public RuleCall getModifiersModifiersParserRuleCall_1_0() { return cModifiersModifiersParserRuleCall_1_0; }

		//"pattern"
		public Keyword getPatternKeyword_2() { return cPatternKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_0_0() { return cParametersParameterParserRuleCall_5_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_1_1_0() { return cParametersParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"="?
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//bodies+=PatternBody
		public Assignment getBodiesAssignment_8() { return cBodiesAssignment_8; }

		//PatternBody
		public RuleCall getBodiesPatternBodyParserRuleCall_8_0() { return cBodiesPatternBodyParserRuleCall_8_0; }

		//("or" bodies+=PatternBody)*
		public Group getGroup_9() { return cGroup_9; }

		//"or"
		public Keyword getOrKeyword_9_0() { return cOrKeyword_9_0; }

		//bodies+=PatternBody
		public Assignment getBodiesAssignment_9_1() { return cBodiesAssignment_9_1; }

		//PatternBody
		public RuleCall getBodiesPatternBodyParserRuleCall_9_1_0() { return cBodiesPatternBodyParserRuleCall_9_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersAnnotationParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersAnnotationParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Annotation:
		//	"@" name=ID ("(" parameters+=AnnotationParameter ("," parameters+=AnnotationParameter)* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=ID ("(" parameters+=AnnotationParameter ("," parameters+=AnnotationParameter)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" parameters+=AnnotationParameter ("," parameters+=AnnotationParameter)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=AnnotationParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//AnnotationParameter
		public RuleCall getParametersAnnotationParameterParserRuleCall_2_1_0() { return cParametersAnnotationParameterParserRuleCall_2_1_0; }

		//("," parameters+=AnnotationParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=AnnotationParameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//AnnotationParameter
		public RuleCall getParametersAnnotationParameterParserRuleCall_2_2_1_0() { return cParametersAnnotationParameterParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AnnotationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAnnotationValueReferenceParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AnnotationParameter:
		//	name=ID "=" value=AnnotationValueReference;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=AnnotationValueReference
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=AnnotationValueReference
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AnnotationValueReference
		public RuleCall getValueAnnotationValueReferenceParserRuleCall_2_0() { return cValueAnnotationValueReferenceParserRuleCall_2_0; }
	}

	public class ModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifiers");
		private final Assignment cPrivateAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_0 = (Keyword)cPrivateAssignment.eContents().get(0);
		
		//Modifiers: //injective?='injective' &
		//	private?="private";
		public ParserRule getRule() { return rule; }

		////injective?='injective' &
		//private?="private"
		public Assignment getPrivateAssignment() { return cPrivateAssignment; }

		//"private"
		public Keyword getPrivatePrivateKeyword_0() { return cPrivatePrivateKeyword_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//Variable returns types::JvmIdentifiableElement:
		//	{Variable} name=ID (":" type=Type)?;
		public ParserRule getRule() { return rule; }

		//{Variable} name=ID (":" type=Type)?
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" type=Type)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}

	public class ParameterRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cReferredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferredParamVariableCrossReference_2_0 = (CrossReference)cReferredParamAssignment_2.eContents().get(0);
		private final RuleCall cReferredParamVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cReferredParamVariableCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		
		//ParameterRef returns Variable:
		//	{ParameterRef} name=ID referredParam=[Variable] (":" type=Type)?;
		public ParserRule getRule() { return rule; }

		//{ParameterRef} name=ID referredParam=[Variable] (":" type=Type)?
		public Group getGroup() { return cGroup; }

		//{ParameterRef}
		public Action getParameterRefAction_0() { return cParameterRefAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//referredParam=[Variable]
		public Assignment getReferredParamAssignment_2() { return cReferredParamAssignment_2; }

		//[Variable]
		public CrossReference getReferredParamVariableCrossReference_2_0() { return cReferredParamVariableCrossReference_2_0; }

		//ID
		public RuleCall getReferredParamVariableIDTerminalRuleCall_2_0_1() { return cReferredParamVariableIDTerminalRuleCall_2_0_1; }

		//(":" type=Type)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//type=Type
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_1_0() { return cTypeTypeParserRuleCall_3_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Parameter returns Variable:
		//	name=ID (":" type=Type)?;
		public ParserRule getRule() { return rule; }

		//name=ID (":" type=Type)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":" type=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}

	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//LocalVariable returns Variable:
		//	{LocalVariable} name=ID (":" type=Type)?;
		public ParserRule getRule() { return rule; }

		//{LocalVariable} name=ID (":" type=Type)?
		public Group getGroup() { return cGroup; }

		//{LocalVariable}
		public Action getLocalVariableAction_0() { return cLocalVariableAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" type=Type)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//VariableReference:
		//	var=ID;
		public ParserRule getRule() { return rule; }

		//var=ID
		public Assignment getVarAssignment() { return cVarAssignment; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_0() { return cVarIDTerminalRuleCall_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypenameIDTerminalRuleCall_1_0 = (RuleCall)cTypenameAssignment_1.eContents().get(0);
		
		////These types are not meant to be written directly, just in the desc languages
		//Type:
		//	{EntityType} typename=ID;
		public ParserRule getRule() { return rule; }

		//{EntityType} typename=ID
		public Group getGroup() { return cGroup; }

		//{EntityType}
		public Action getEntityTypeAction_0() { return cEntityTypeAction_0; }

		//typename=ID
		public Assignment getTypenameAssignment_1() { return cTypenameAssignment_1; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_1_0() { return cTypenameIDTerminalRuleCall_1_0; }
	}

	public class RefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypenameIDTerminalRuleCall_1_0 = (RuleCall)cTypenameAssignment_1.eContents().get(0);
		
		////These types are not meant to be written directly, just in the desc languages
		//RefType returns Type:
		//	{RelationType} typename=ID;
		public ParserRule getRule() { return rule; }

		//{RelationType} typename=ID
		public Group getGroup() { return cGroup; }

		//{RelationType}
		public Action getRelationTypeAction_0() { return cRelationTypeAction_0; }

		//typename=ID
		public Assignment getTypenameAssignment_1() { return cTypenameAssignment_1; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_1_0() { return cTypenameIDTerminalRuleCall_1_0; }
	}

	public class PatternBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cConstraintsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_0_0 = (RuleCall)cConstraintsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PatternBody:
		//	{PatternBody} name=ID? "{" (constraints+=Constraint ";")* "}";
		public ParserRule getRule() { return rule; }

		//{PatternBody} name=ID? "{" (constraints+=Constraint ";")* "}"
		public Group getGroup() { return cGroup; }

		//{PatternBody}
		public Action getPatternBodyAction_0() { return cPatternBodyAction_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(constraints+=Constraint ";")*
		public Group getGroup_3() { return cGroup_3; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_3_0() { return cConstraintsAssignment_3_0; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_0_0() { return cConstraintsConstraintParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompareConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPatternCompositionConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPathExpressionConstraintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Constraint:
		//	CheckConstraint | CompareConstraint | PatternCompositionConstraint | PathExpressionConstraint;
		public ParserRule getRule() { return rule; }

		//CheckConstraint | CompareConstraint | PatternCompositionConstraint | PathExpressionConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//CheckConstraint
		public RuleCall getCheckConstraintParserRuleCall_0() { return cCheckConstraintParserRuleCall_0; }

		//CompareConstraint
		public RuleCall getCompareConstraintParserRuleCall_1() { return cCompareConstraintParserRuleCall_1; }

		//PatternCompositionConstraint
		public RuleCall getPatternCompositionConstraintParserRuleCall_2() { return cPatternCompositionConstraintParserRuleCall_2; }

		//PathExpressionConstraint
		public RuleCall getPathExpressionConstraintParserRuleCall_3() { return cPathExpressionConstraintParserRuleCall_3; }
	}

	public class PatternCompositionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternCompositionConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternCompositionConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNegativeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegativeNegKeyword_1_0 = (Keyword)cNegativeAssignment_1.eContents().get(0);
		private final Assignment cCallAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallPatternCallParserRuleCall_2_0 = (RuleCall)cCallAssignment_2.eContents().get(0);
		
		//PatternCompositionConstraint returns Constraint:
		//	{PatternCompositionConstraint} negative?="neg"? call=PatternCall;
		public ParserRule getRule() { return rule; }

		//{PatternCompositionConstraint} negative?="neg"? call=PatternCall
		public Group getGroup() { return cGroup; }

		//{PatternCompositionConstraint}
		public Action getPatternCompositionConstraintAction_0() { return cPatternCompositionConstraintAction_0; }

		//negative?="neg"?
		public Assignment getNegativeAssignment_1() { return cNegativeAssignment_1; }

		//"neg"
		public Keyword getNegativeNegKeyword_1_0() { return cNegativeNegKeyword_1_0; }

		//call=PatternCall
		public Assignment getCallAssignment_2() { return cCallAssignment_2; }

		//PatternCall
		public RuleCall getCallPatternCallParserRuleCall_2_0() { return cCallPatternCallParserRuleCall_2_0; }
	}

	public class PatternCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPatternRefPatternCrossReference_1_0 = (CrossReference)cPatternRefAssignment_1.eContents().get(0);
		private final RuleCall cPatternRefPatternQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cPatternRefPatternCrossReference_1_0.eContents().get(1);
		private final Assignment cTransitiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cTransitivePlusSignKeyword_2_0 = (Keyword)cTransitiveAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersValueReferenceParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersValueReferenceParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////'count' 'find' patternRef=[Pattern] '(' (parameters+=ValueReference (','
		////parameters+=ValueReference)*)? ')';
		//PatternCall:
		//	"find" patternRef=[Pattern|QualifiedName] transitive?="+"? "(" (parameters+=ValueReference (","
		//	parameters+=ValueReference)*)? ")";
		public ParserRule getRule() { return rule; }

		//"find" patternRef=[Pattern|QualifiedName] transitive?="+"? "(" (parameters+=ValueReference (","
		//parameters+=ValueReference)*)? ")"
		public Group getGroup() { return cGroup; }

		//"find"
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }

		//patternRef=[Pattern|QualifiedName]
		public Assignment getPatternRefAssignment_1() { return cPatternRefAssignment_1; }

		//[Pattern|QualifiedName]
		public CrossReference getPatternRefPatternCrossReference_1_0() { return cPatternRefPatternCrossReference_1_0; }

		//QualifiedName
		public RuleCall getPatternRefPatternQualifiedNameParserRuleCall_1_0_1() { return cPatternRefPatternQualifiedNameParserRuleCall_1_0_1; }

		//transitive?="+"?
		public Assignment getTransitiveAssignment_2() { return cTransitiveAssignment_2; }

		//"+"
		public Keyword getTransitivePlusSignKeyword_2_0() { return cTransitivePlusSignKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=ValueReference ("," parameters+=ValueReference)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=ValueReference
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//ValueReference
		public RuleCall getParametersValueReferenceParserRuleCall_4_0_0() { return cParametersValueReferenceParserRuleCall_4_0_0; }

		//("," parameters+=ValueReference)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=ValueReference
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//ValueReference
		public RuleCall getParametersValueReferenceParserRuleCall_4_1_1_0() { return cParametersValueReferenceParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CompareConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompareConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompareConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftOperandValueReferenceParserRuleCall_1_0 = (RuleCall)cLeftOperandAssignment_1.eContents().get(0);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureCompareFeatureEnumRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		private final Assignment cRightOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightOperandValueReferenceParserRuleCall_3_0 = (RuleCall)cRightOperandAssignment_3.eContents().get(0);
		
		//CompareConstraint returns Constraint:
		//	{CompareConstraint} leftOperand=ValueReference feature=CompareFeature rightOperand=ValueReference;
		public ParserRule getRule() { return rule; }

		//{CompareConstraint} leftOperand=ValueReference feature=CompareFeature rightOperand=ValueReference
		public Group getGroup() { return cGroup; }

		//{CompareConstraint}
		public Action getCompareConstraintAction_0() { return cCompareConstraintAction_0; }

		//leftOperand=ValueReference
		public Assignment getLeftOperandAssignment_1() { return cLeftOperandAssignment_1; }

		//ValueReference
		public RuleCall getLeftOperandValueReferenceParserRuleCall_1_0() { return cLeftOperandValueReferenceParserRuleCall_1_0; }

		//feature=CompareFeature
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//CompareFeature
		public RuleCall getFeatureCompareFeatureEnumRuleCall_2_0() { return cFeatureCompareFeatureEnumRuleCall_2_0; }

		//rightOperand=ValueReference
		public Assignment getRightOperandAssignment_3() { return cRightOperandAssignment_3; }

		//ValueReference
		public RuleCall getRightOperandValueReferenceParserRuleCall_3_0() { return cRightOperandValueReferenceParserRuleCall_3_0; }
	}

	public class CheckConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCheckConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CheckConstraint returns Constraint:
		//	{CheckConstraint} "check" "(" expression=XExpression ")";
		public ParserRule getRule() { return rule; }

		//{CheckConstraint} "check" "(" expression=XExpression ")"
		public Group getGroup() { return cGroup; }

		//{CheckConstraint}
		public Action getCheckConstraintAction_0() { return cCheckConstraintAction_0; }

		//"check"
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=XExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_3_0() { return cExpressionXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PathExpressionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExpressionConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathExpressionConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadPathExpressionHeadParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		
		//PathExpressionConstraint returns Constraint:
		//	{PathExpressionConstraint} head=PathExpressionHead;
		public ParserRule getRule() { return rule; }

		//{PathExpressionConstraint} head=PathExpressionHead
		public Group getGroup() { return cGroup; }

		//{PathExpressionConstraint}
		public Action getPathExpressionConstraintAction_0() { return cPathExpressionConstraintAction_0; }

		//head=PathExpressionHead
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }

		//PathExpressionHead
		public RuleCall getHeadPathExpressionHeadParserRuleCall_1_0() { return cHeadPathExpressionHeadParserRuleCall_1_0; }
	}

	public class PathExpressionHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExpressionHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathExpressionHeadAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTailAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTailPathExpressionTailParserRuleCall_3_0 = (RuleCall)cTailAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSrcAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSrcVariableReferenceParserRuleCall_5_0 = (RuleCall)cSrcAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDstAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDstValueReferenceParserRuleCall_7_0 = (RuleCall)cDstAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//PathExpressionHead returns PathExpressionElement:
		//	{PathExpressionHead} type=Type "." tail=PathExpressionTail "(" src=VariableReference "," dst=ValueReference ")";
		public ParserRule getRule() { return rule; }

		//{PathExpressionHead} type=Type "." tail=PathExpressionTail "(" src=VariableReference "," dst=ValueReference ")"
		public Group getGroup() { return cGroup; }

		//{PathExpressionHead}
		public Action getPathExpressionHeadAction_0() { return cPathExpressionHeadAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//tail=PathExpressionTail
		public Assignment getTailAssignment_3() { return cTailAssignment_3; }

		//PathExpressionTail
		public RuleCall getTailPathExpressionTailParserRuleCall_3_0() { return cTailPathExpressionTailParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//src=VariableReference
		public Assignment getSrcAssignment_5() { return cSrcAssignment_5; }

		//VariableReference
		public RuleCall getSrcVariableReferenceParserRuleCall_5_0() { return cSrcVariableReferenceParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//dst=ValueReference
		public Assignment getDstAssignment_7() { return cDstAssignment_7; }

		//ValueReference
		public RuleCall getDstValueReferenceParserRuleCall_7_0() { return cDstValueReferenceParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class PathExpressionTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathExpressionTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathExpressionTailAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRefTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cClosureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cClosureAsteriskKeyword_3_0 = (Keyword)cClosureAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTailAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTailPathExpressionTailParserRuleCall_4_1_0 = (RuleCall)cTailAssignment_4_1.eContents().get(0);
		
		//PathExpressionTail returns PathExpressionElement:
		//	{PathExpressionTail} type=RefType ("[" index=INT "]")? closure?="*"? ("." tail=PathExpressionTail)?;
		public ParserRule getRule() { return rule; }

		//{PathExpressionTail} type=RefType ("[" index=INT "]")? closure?="*"? ("." tail=PathExpressionTail)?
		public Group getGroup() { return cGroup; }

		//{PathExpressionTail}
		public Action getPathExpressionTailAction_0() { return cPathExpressionTailAction_0; }

		//type=RefType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//RefType
		public RuleCall getTypeRefTypeParserRuleCall_1_0() { return cTypeRefTypeParserRuleCall_1_0; }

		//("[" index=INT "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//index=INT
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_1_0() { return cIndexINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//closure?="*"?
		public Assignment getClosureAssignment_3() { return cClosureAssignment_3; }

		//"*"
		public Keyword getClosureAsteriskKeyword_3_0() { return cClosureAsteriskKeyword_3_0; }

		//("." tail=PathExpressionTail)?
		public Group getGroup_4() { return cGroup_4; }

		//"."
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }

		//tail=PathExpressionTail
		public Assignment getTailAssignment_4_1() { return cTailAssignment_4_1; }

		//PathExpressionTail
		public RuleCall getTailPathExpressionTailParserRuleCall_4_1_0() { return cTailPathExpressionTailParserRuleCall_4_1_0; }
	}

	public class ValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralValueReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComputationValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValueReference:
		//	LiteralValueReference | VariableValue | ComputationValue;
		public ParserRule getRule() { return rule; }

		//LiteralValueReference | VariableValue | ComputationValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralValueReference
		public RuleCall getLiteralValueReferenceParserRuleCall_0() { return cLiteralValueReferenceParserRuleCall_0; }

		//VariableValue
		public RuleCall getVariableValueParserRuleCall_1() { return cVariableValueParserRuleCall_1; }

		//ComputationValue
		public RuleCall getComputationValueParserRuleCall_2() { return cComputationValueParserRuleCall_2; }
	}

	public class AnnotationValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationValueReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnnotationValueReference returns ValueReference:
		//	ValueReference | ListValue;
		public ParserRule getRule() { return rule; }

		//ValueReference | ListValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueReference
		public RuleCall getValueReferenceParserRuleCall_0() { return cValueReferenceParserRuleCall_0; }

		//ListValue
		public RuleCall getListValueParserRuleCall_1() { return cListValueParserRuleCall_1; }
	}

	public class LiteralValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValueReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LiteralValueReference returns ValueReference:
		//	IntValue | StringValue | DoubleValue | BoolValue;
		public ParserRule getRule() { return rule; }

		//IntValue | StringValue | DoubleValue | BoolValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }

		//DoubleValue
		public RuleCall getDoubleValueParserRuleCall_2() { return cDoubleValueParserRuleCall_2; }

		//BoolValue
		public RuleCall getBoolValueParserRuleCall_3() { return cBoolValueParserRuleCall_3; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntValue returns LiteralValueReference:
		//	{IntValue} value=INTNUMBER;
		public ParserRule getRule() { return rule; }

		//{IntValue} value=INTNUMBER
		public Group getGroup() { return cGroup; }

		//{IntValue}
		public Action getIntValueAction_0() { return cIntValueAction_0; }

		//value=INTNUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INTNUMBER
		public RuleCall getValueINTNUMBERParserRuleCall_1_0() { return cValueINTNUMBERParserRuleCall_1_0; }
	}

	public class INTNUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTNUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//INTNUMBER returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue returns LiteralValueReference:
		//	{StringValue} value=STRING;
		public ParserRule getRule() { return rule; }

		//{StringValue} value=STRING
		public Group getGroup() { return cGroup; }

		//{StringValue}
		public Action getStringValueAction_0() { return cStringValueAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BoolValue returns LiteralValueReference:
		//	{BoolValue} value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//{BoolValue} value=BOOLEAN
		public Group getGroup() { return cGroup; }

		//{BoolValue}
		public Action getBoolValueAction_0() { return cBoolValueAction_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_1_0() { return cValueBOOLEANParserRuleCall_1_0; }
	}

	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTRUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFALSEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BOOLEAN returns ecore::EBoolean:
		//	"true" | "false" | "TRUE" | "FALSE";
		public ParserRule getRule() { return rule; }

		//"true" | "false" | "TRUE" | "FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//"TRUE"
		public Keyword getTRUEKeyword_2() { return cTRUEKeyword_2; }

		//"FALSE"
		public Keyword getFALSEKeyword_3() { return cFALSEKeyword_3; }
	}

	public class DoubleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DoubleValue returns LiteralValueReference:
		//	{DoubleValue} value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//{DoubleValue} value=DOUBLE
		public Group getGroup() { return cGroup; }

		//{DoubleValue}
		public Action getDoubleValueAction_0() { return cDoubleValueAction_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_1_0() { return cValueDOUBLEParserRuleCall_1_0; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DOUBLE returns ecore::EDouble:
		//	"-"? INT "." INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT "." INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}

	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueVariableReferenceParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//VariableValue returns ValueReference:
		//	{VariableValue} value=VariableReference;
		public ParserRule getRule() { return rule; }

		//{VariableValue} value=VariableReference
		public Group getGroup() { return cGroup; }

		//{VariableValue}
		public Action getVariableValueAction_0() { return cVariableValueAction_0; }

		//value=VariableReference
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//VariableReference
		public RuleCall getValueVariableReferenceParserRuleCall_1_0() { return cValueVariableReferenceParserRuleCall_1_0; }
	}

	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueReferenceParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesValueReferenceParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListValue returns LiteralValueReference:
		//	{ListValue} "{" values+=ValueReference ("," values+=ValueReference)* "}";
		public ParserRule getRule() { return rule; }

		//{ListValue} "{" values+=ValueReference ("," values+=ValueReference)* "}"
		public Group getGroup() { return cGroup; }

		//{ListValue}
		public Action getListValueAction_0() { return cListValueAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//values+=ValueReference
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//ValueReference
		public RuleCall getValuesValueReferenceParserRuleCall_2_0() { return cValuesValueReferenceParserRuleCall_2_0; }

		//("," values+=ValueReference)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=ValueReference
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//ValueReference
		public RuleCall getValuesValueReferenceParserRuleCall_3_1_0() { return cValuesValueReferenceParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ComputationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputationValue");
		private final RuleCall cAggregatedValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComputationValue returns ValueReference:
		//	AggregatedValue;
		public ParserRule getRule() { return rule; }

		//AggregatedValue
		public RuleCall getAggregatedValueParserRuleCall() { return cAggregatedValueParserRuleCall; }
	}

	public class AggregatedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggregatedValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregatedValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAggregatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAggregatorAggregatorExpressionParserRuleCall_1_0 = (RuleCall)cAggregatorAssignment_1.eContents().get(0);
		private final Assignment cCallAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallPatternCallParserRuleCall_2_0 = (RuleCall)cCallAssignment_2.eContents().get(0);
		
		//AggregatedValue returns ComputationValue:
		//	{AggregatedValue} / *'aggregate'* / aggregator=AggregatorExpression call=PatternCall;
		public ParserRule getRule() { return rule; }

		//{AggregatedValue} / *'aggregate'* / aggregator=AggregatorExpression call=PatternCall
		public Group getGroup() { return cGroup; }

		//{AggregatedValue}
		public Action getAggregatedValueAction_0() { return cAggregatedValueAction_0; }

		/// *'aggregate'* / aggregator=AggregatorExpression
		public Assignment getAggregatorAssignment_1() { return cAggregatorAssignment_1; }

		//AggregatorExpression
		public RuleCall getAggregatorAggregatorExpressionParserRuleCall_1_0() { return cAggregatorAggregatorExpressionParserRuleCall_1_0; }

		//call=PatternCall
		public Assignment getCallAssignment_2() { return cCallAssignment_2; }

		//PatternCall
		public RuleCall getCallPatternCallParserRuleCall_2_0() { return cCallPatternCallParserRuleCall_2_0; }
	}

	public class AggregatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggregatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCountAggregatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AggregatorExpression:
		//	{CountAggregator} "count";
		public ParserRule getRule() { return rule; }

		//{CountAggregator} "count"
		public Group getGroup() { return cGroup; }

		//{CountAggregator}
		public Action getCountAggregatorAction_0() { return cCountAggregatorAction_0; }

		//"count"
		public Keyword getCountKeyword_1() { return cCountKeyword_1; }
	}
	
	
	public class CompareFeatureElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompareFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualityEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualityEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualityEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInequalityEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInequalityExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cInequalityEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompareFeature:
		//	equality="==" | inequality="!=";
		public EnumRule getRule() { return rule; }

		//equality="==" | inequality="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//equality="=="
		public EnumLiteralDeclaration getEqualityEnumLiteralDeclaration_0() { return cEqualityEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualityEqualsSignEqualsSignKeyword_0_0() { return cEqualityEqualsSignEqualsSignKeyword_0_0; }

		//inequality="!="
		public EnumLiteralDeclaration getInequalityEnumLiteralDeclaration_1() { return cInequalityEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getInequalityExclamationMarkEqualsSignKeyword_1_0() { return cInequalityExclamationMarkEqualsSignKeyword_1_0; }
	}
	
	private PatternModelElements pPatternModel;
	private PatternElements pPattern;
	private AnnotationElements pAnnotation;
	private AnnotationParameterElements pAnnotationParameter;
	private ModifiersElements pModifiers;
	private VariableElements pVariable;
	private ParameterRefElements pParameterRef;
	private ParameterElements pParameter;
	private LocalVariableElements pLocalVariable;
	private VariableReferenceElements pVariableReference;
	private TypeElements pType;
	private RefTypeElements pRefType;
	private PatternBodyElements pPatternBody;
	private ConstraintElements pConstraint;
	private PatternCompositionConstraintElements pPatternCompositionConstraint;
	private PatternCallElements pPatternCall;
	private CompareConstraintElements pCompareConstraint;
	private CompareFeatureElements unknownRuleCompareFeature;
	private CheckConstraintElements pCheckConstraint;
	private PathExpressionConstraintElements pPathExpressionConstraint;
	private PathExpressionHeadElements pPathExpressionHead;
	private PathExpressionTailElements pPathExpressionTail;
	private ValueReferenceElements pValueReference;
	private AnnotationValueReferenceElements pAnnotationValueReference;
	private LiteralValueReferenceElements pLiteralValueReference;
	private IntValueElements pIntValue;
	private INTNUMBERElements pINTNUMBER;
	private StringValueElements pStringValue;
	private BoolValueElements pBoolValue;
	private BOOLEANElements pBOOLEAN;
	private DoubleValueElements pDoubleValue;
	private DOUBLEElements pDOUBLE;
	private VariableValueElements pVariableValue;
	private ListValueElements pListValue;
	private ComputationValueElements pComputationValue;
	private AggregatedValueElements pAggregatedValue;
	private AggregatorExpressionElements pAggregatorExpression;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public PatternLanguageGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.incquery.patternlanguage.PatternLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//PatternModel:
	//	("package" packageName=QualifiedName)? patterns+=Pattern*;
	public PatternModelElements getPatternModelAccess() {
		return (pPatternModel != null) ? pPatternModel : (pPatternModel = new PatternModelElements());
	}
	
	public ParserRule getPatternModelRule() {
		return getPatternModelAccess().getRule();
	}

	//Pattern:
	//	annotations+=Annotation* modifiers+=Modifiers* "pattern" name=ID "(" (parameters+=Parameter (","
	//	parameters+=Parameter)*)? ")" "="? bodies+=PatternBody ("or" bodies+=PatternBody)*;
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//Annotation:
	//	"@" name=ID ("(" parameters+=AnnotationParameter ("," parameters+=AnnotationParameter)* ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationParameter:
	//	name=ID "=" value=AnnotationValueReference;
	public AnnotationParameterElements getAnnotationParameterAccess() {
		return (pAnnotationParameter != null) ? pAnnotationParameter : (pAnnotationParameter = new AnnotationParameterElements());
	}
	
	public ParserRule getAnnotationParameterRule() {
		return getAnnotationParameterAccess().getRule();
	}

	//Modifiers: //injective?='injective' &
	//	private?="private";
	public ModifiersElements getModifiersAccess() {
		return (pModifiers != null) ? pModifiers : (pModifiers = new ModifiersElements());
	}
	
	public ParserRule getModifiersRule() {
		return getModifiersAccess().getRule();
	}

	//Variable returns types::JvmIdentifiableElement:
	//	{Variable} name=ID (":" type=Type)?;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//ParameterRef returns Variable:
	//	{ParameterRef} name=ID referredParam=[Variable] (":" type=Type)?;
	public ParameterRefElements getParameterRefAccess() {
		return (pParameterRef != null) ? pParameterRef : (pParameterRef = new ParameterRefElements());
	}
	
	public ParserRule getParameterRefRule() {
		return getParameterRefAccess().getRule();
	}

	//Parameter returns Variable:
	//	name=ID (":" type=Type)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//LocalVariable returns Variable:
	//	{LocalVariable} name=ID (":" type=Type)?;
	public LocalVariableElements getLocalVariableAccess() {
		return (pLocalVariable != null) ? pLocalVariable : (pLocalVariable = new LocalVariableElements());
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}

	//VariableReference:
	//	var=ID;
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	////These types are not meant to be written directly, just in the desc languages
	//Type:
	//	{EntityType} typename=ID;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////These types are not meant to be written directly, just in the desc languages
	//RefType returns Type:
	//	{RelationType} typename=ID;
	public RefTypeElements getRefTypeAccess() {
		return (pRefType != null) ? pRefType : (pRefType = new RefTypeElements());
	}
	
	public ParserRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}

	//PatternBody:
	//	{PatternBody} name=ID? "{" (constraints+=Constraint ";")* "}";
	public PatternBodyElements getPatternBodyAccess() {
		return (pPatternBody != null) ? pPatternBody : (pPatternBody = new PatternBodyElements());
	}
	
	public ParserRule getPatternBodyRule() {
		return getPatternBodyAccess().getRule();
	}

	//Constraint:
	//	CheckConstraint | CompareConstraint | PatternCompositionConstraint | PathExpressionConstraint;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//PatternCompositionConstraint returns Constraint:
	//	{PatternCompositionConstraint} negative?="neg"? call=PatternCall;
	public PatternCompositionConstraintElements getPatternCompositionConstraintAccess() {
		return (pPatternCompositionConstraint != null) ? pPatternCompositionConstraint : (pPatternCompositionConstraint = new PatternCompositionConstraintElements());
	}
	
	public ParserRule getPatternCompositionConstraintRule() {
		return getPatternCompositionConstraintAccess().getRule();
	}

	////'count' 'find' patternRef=[Pattern] '(' (parameters+=ValueReference (','
	////parameters+=ValueReference)*)? ')';
	//PatternCall:
	//	"find" patternRef=[Pattern|QualifiedName] transitive?="+"? "(" (parameters+=ValueReference (","
	//	parameters+=ValueReference)*)? ")";
	public PatternCallElements getPatternCallAccess() {
		return (pPatternCall != null) ? pPatternCall : (pPatternCall = new PatternCallElements());
	}
	
	public ParserRule getPatternCallRule() {
		return getPatternCallAccess().getRule();
	}

	//CompareConstraint returns Constraint:
	//	{CompareConstraint} leftOperand=ValueReference feature=CompareFeature rightOperand=ValueReference;
	public CompareConstraintElements getCompareConstraintAccess() {
		return (pCompareConstraint != null) ? pCompareConstraint : (pCompareConstraint = new CompareConstraintElements());
	}
	
	public ParserRule getCompareConstraintRule() {
		return getCompareConstraintAccess().getRule();
	}

	//enum CompareFeature:
	//	equality="==" | inequality="!=";
	public CompareFeatureElements getCompareFeatureAccess() {
		return (unknownRuleCompareFeature != null) ? unknownRuleCompareFeature : (unknownRuleCompareFeature = new CompareFeatureElements());
	}
	
	public EnumRule getCompareFeatureRule() {
		return getCompareFeatureAccess().getRule();
	}

	//CheckConstraint returns Constraint:
	//	{CheckConstraint} "check" "(" expression=XExpression ")";
	public CheckConstraintElements getCheckConstraintAccess() {
		return (pCheckConstraint != null) ? pCheckConstraint : (pCheckConstraint = new CheckConstraintElements());
	}
	
	public ParserRule getCheckConstraintRule() {
		return getCheckConstraintAccess().getRule();
	}

	//PathExpressionConstraint returns Constraint:
	//	{PathExpressionConstraint} head=PathExpressionHead;
	public PathExpressionConstraintElements getPathExpressionConstraintAccess() {
		return (pPathExpressionConstraint != null) ? pPathExpressionConstraint : (pPathExpressionConstraint = new PathExpressionConstraintElements());
	}
	
	public ParserRule getPathExpressionConstraintRule() {
		return getPathExpressionConstraintAccess().getRule();
	}

	//PathExpressionHead returns PathExpressionElement:
	//	{PathExpressionHead} type=Type "." tail=PathExpressionTail "(" src=VariableReference "," dst=ValueReference ")";
	public PathExpressionHeadElements getPathExpressionHeadAccess() {
		return (pPathExpressionHead != null) ? pPathExpressionHead : (pPathExpressionHead = new PathExpressionHeadElements());
	}
	
	public ParserRule getPathExpressionHeadRule() {
		return getPathExpressionHeadAccess().getRule();
	}

	//PathExpressionTail returns PathExpressionElement:
	//	{PathExpressionTail} type=RefType ("[" index=INT "]")? closure?="*"? ("." tail=PathExpressionTail)?;
	public PathExpressionTailElements getPathExpressionTailAccess() {
		return (pPathExpressionTail != null) ? pPathExpressionTail : (pPathExpressionTail = new PathExpressionTailElements());
	}
	
	public ParserRule getPathExpressionTailRule() {
		return getPathExpressionTailAccess().getRule();
	}

	//ValueReference:
	//	LiteralValueReference | VariableValue | ComputationValue;
	public ValueReferenceElements getValueReferenceAccess() {
		return (pValueReference != null) ? pValueReference : (pValueReference = new ValueReferenceElements());
	}
	
	public ParserRule getValueReferenceRule() {
		return getValueReferenceAccess().getRule();
	}

	//AnnotationValueReference returns ValueReference:
	//	ValueReference | ListValue;
	public AnnotationValueReferenceElements getAnnotationValueReferenceAccess() {
		return (pAnnotationValueReference != null) ? pAnnotationValueReference : (pAnnotationValueReference = new AnnotationValueReferenceElements());
	}
	
	public ParserRule getAnnotationValueReferenceRule() {
		return getAnnotationValueReferenceAccess().getRule();
	}

	//LiteralValueReference returns ValueReference:
	//	IntValue | StringValue | DoubleValue | BoolValue;
	public LiteralValueReferenceElements getLiteralValueReferenceAccess() {
		return (pLiteralValueReference != null) ? pLiteralValueReference : (pLiteralValueReference = new LiteralValueReferenceElements());
	}
	
	public ParserRule getLiteralValueReferenceRule() {
		return getLiteralValueReferenceAccess().getRule();
	}

	//IntValue returns LiteralValueReference:
	//	{IntValue} value=INTNUMBER;
	public IntValueElements getIntValueAccess() {
		return (pIntValue != null) ? pIntValue : (pIntValue = new IntValueElements());
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//INTNUMBER returns ecore::EInt:
	//	"-"? INT;
	public INTNUMBERElements getINTNUMBERAccess() {
		return (pINTNUMBER != null) ? pINTNUMBER : (pINTNUMBER = new INTNUMBERElements());
	}
	
	public ParserRule getINTNUMBERRule() {
		return getINTNUMBERAccess().getRule();
	}

	//StringValue returns LiteralValueReference:
	//	{StringValue} value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//BoolValue returns LiteralValueReference:
	//	{BoolValue} value=BOOLEAN;
	public BoolValueElements getBoolValueAccess() {
		return (pBoolValue != null) ? pBoolValue : (pBoolValue = new BoolValueElements());
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//BOOLEAN returns ecore::EBoolean:
	//	"true" | "false" | "TRUE" | "FALSE";
	public BOOLEANElements getBOOLEANAccess() {
		return (pBOOLEAN != null) ? pBOOLEAN : (pBOOLEAN = new BOOLEANElements());
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//DoubleValue returns LiteralValueReference:
	//	{DoubleValue} value=DOUBLE;
	public DoubleValueElements getDoubleValueAccess() {
		return (pDoubleValue != null) ? pDoubleValue : (pDoubleValue = new DoubleValueElements());
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	"-"? INT "." INT;
	public DOUBLEElements getDOUBLEAccess() {
		return (pDOUBLE != null) ? pDOUBLE : (pDOUBLE = new DOUBLEElements());
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//VariableValue returns ValueReference:
	//	{VariableValue} value=VariableReference;
	public VariableValueElements getVariableValueAccess() {
		return (pVariableValue != null) ? pVariableValue : (pVariableValue = new VariableValueElements());
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}

	//ListValue returns LiteralValueReference:
	//	{ListValue} "{" values+=ValueReference ("," values+=ValueReference)* "}";
	public ListValueElements getListValueAccess() {
		return (pListValue != null) ? pListValue : (pListValue = new ListValueElements());
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}

	//ComputationValue returns ValueReference:
	//	AggregatedValue;
	public ComputationValueElements getComputationValueAccess() {
		return (pComputationValue != null) ? pComputationValue : (pComputationValue = new ComputationValueElements());
	}
	
	public ParserRule getComputationValueRule() {
		return getComputationValueAccess().getRule();
	}

	//AggregatedValue returns ComputationValue:
	//	{AggregatedValue} / *'aggregate'* / aggregator=AggregatorExpression call=PatternCall;
	public AggregatedValueElements getAggregatedValueAccess() {
		return (pAggregatedValue != null) ? pAggregatedValue : (pAggregatedValue = new AggregatedValueElements());
	}
	
	public ParserRule getAggregatedValueRule() {
		return getAggregatedValueAccess().getRule();
	}

	//AggregatorExpression:
	//	{CountAggregator} "count";
	public AggregatorExpressionElements getAggregatorExpressionAccess() {
		return (pAggregatorExpression != null) ? pAggregatorExpression : (pAggregatorExpression = new AggregatorExpressionElements());
	}
	
	public ParserRule getAggregatorExpressionRule() {
		return getAggregatorExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
