epackage rolemapping ; 

// plain Java imports
import org.eclipse.emf.ecore.EObject; 
import org.eclipse.emf.ecore.EClass; 
import org.eclipse.emf.common.util.EList; 
import org.eclipse.emf.common.util.BasicEList; 
import org.eclipse.emf.ecore.util.EcoreUtil; 
import java.util.List; 
// import of other EClasses
import roles.Role; 
import roles.RoleModifier; 
import roles.MultiplicityCollaboration; 

eclass ConcreteMapping { 
	getCollaborationMappingForTargetRole ( ) { 
			EList < CollaborationMapping > mappings = getCollaborationMappings ( ) ; 
			for ( CollaborationMapping relationMapping : mappings ) { 
				EcoreUtil .resolveAll ( relationMapping ) ; 
				MultiplicityCollaboration collaboration = relationMapping .getCollaboration ( ) ; 
				if ( collaboration .getTarget ( ) .equals ( role ) ) { 
					return relationMapping ; 
				} 
			} 
			return null ; 
		} 
	getAttributeMappingForAttribute ( ) { 
			if ( attribute == null ) { 
				return null ; 
			} 
			List < AttributeMapping > attributeMappings = getAttributeMappings ( ) ; 
			for ( AttributeMapping attributeMapping : attributeMappings ) { 
				if ( attributeMapping .getRoleAttribute ( ) .equals ( attribute ) ) { 
					return attributeMapping ; 
				} 
			} 
			return null ; 
		} 
	getCollaborationMappingForCollaboration ( ) { 
			List < CollaborationMapping > relationMappings = getCollaborationMappings ( ) ; 
			for ( CollaborationMapping collaborationMapping : relationMappings ) { 
				MultiplicityCollaboration mappedCollaboration = collaborationMapping .getCollaboration ( ) ; 
				if ( mappedCollaboration .equals ( collaboration ) ) { 
					return collaborationMapping ; 
				} 
			} 
			return null ; 
		} 
} 