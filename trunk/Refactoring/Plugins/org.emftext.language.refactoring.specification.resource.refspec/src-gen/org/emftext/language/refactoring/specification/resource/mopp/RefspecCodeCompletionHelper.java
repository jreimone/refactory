/**
 * <copyright>
 * </copyright>
 *
 * 
 */
package org.emftext.language.refactoring.specification.resource.mopp;

// A CodeCompletionHelper can be used to derive completion proposals for partial
// documents. It runs the parser generated by EMFText in a special mode (i.e., the
// rememberExpectedElements mode). Based on the elements that are expected by the
// parser for different regions in the document, valid proposals are computed.
public class RefspecCodeCompletionHelper {
	
	private org.emftext.language.refactoring.specification.resource.mopp.RefspecAttributeValueProvider attributeValueProvider = new org.emftext.language.refactoring.specification.resource.mopp.RefspecAttributeValueProvider();
	// Computes a set of proposals for the given document assuming the cursor is
	// at 'cursorOffset'. The proposals are derived using the meta information, i.e.,
	// the generated language plug-in.
	//
	// @param metaInformation
	// @param content the documents content
	// @param cursorOffset
	// @return
	public org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal[] computeCompletionProposals(org.emftext.language.refactoring.specification.resource.IRefspecTextResource originalResource, String content, int cursorOffset) {
		org.eclipse.emf.ecore.resource.ResourceSet resourceSet = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl();
		// the shadow resource needs the same URI because reference resolvers may use the URI to resolve external references
		org.emftext.language.refactoring.specification.resource.IRefspecTextResource resource = (org.emftext.language.refactoring.specification.resource.IRefspecTextResource) resourceSet.createResource(originalResource.getURI());
		java.io.ByteArrayInputStream inputStream = new java.io.ByteArrayInputStream(content.getBytes());
		org.emftext.language.refactoring.specification.resource.mopp.RefspecMetaInformation metaInformation = resource.getMetaInformation();
		org.emftext.language.refactoring.specification.resource.IRefspecTextParser parser = metaInformation.createParser(inputStream, null);
		org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[] expectedElements = parseToExpectedElements(parser, resource);
		if (expectedElements == null) {
			return new org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal[0];
		}
		if (expectedElements.length == 0) {
			return new org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal[0];
		}
		java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedAfterCursor = java.util.Arrays.asList(getElementsExpectedAt(expectedElements, cursorOffset));
		java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedBeforeCursor = java.util.Arrays.asList(getElementsExpectedAt(expectedElements, cursorOffset - 1));
		System.out.println("parseToCursor(" + cursorOffset + ") BEFORE CURSOR " + expectedBeforeCursor);
		System.out.println("parseToCursor(" + cursorOffset + ") AFTER CURSOR  " + expectedAfterCursor);
		setPrefixes(expectedAfterCursor, content, cursorOffset);
		setPrefixes(expectedBeforeCursor, content, cursorOffset);
		// first we derive all possible proposals from the set of elements that are expected at the cursor position
		java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> allProposals = new java.util.LinkedHashSet<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal>();
		java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> rightProposals = deriveProposals(expectedAfterCursor, content, resource, cursorOffset);
		java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> leftProposals = deriveProposals(expectedBeforeCursor, content, resource, cursorOffset - 1);
		// second, the set of left proposals (i.e., the ones before the cursor) is
		// checked for emptiness. if the set is empty, the right proposals (i.e., 
		// the ones after the cursor are removed, because it does not make sense to
		// propose them until the element before the cursor was completed
		allProposals.addAll(leftProposals);
		if (leftProposals.isEmpty()) {
			allProposals.addAll(rightProposals);
		}
		// third, the proposals are sorted according to their relevance
		// proposals that matched the prefix are preferred over ones that did not
		// afterward proposals are sorted alphabetically
		final java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> sortedProposals = new java.util.ArrayList<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal>(allProposals);
		java.util.Collections.sort(sortedProposals);
		return sortedProposals.toArray(new org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal[sortedProposals.size()]);
	}
	
	public org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[] parseToExpectedElements(org.emftext.language.refactoring.specification.resource.IRefspecTextParser parser, org.emftext.language.refactoring.specification.resource.IRefspecTextResource resource) {
		final java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedElements = parser.parseToExpectedElements(null, resource);
		if (expectedElements == null) {
			return new org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[0];
		}
		removeDuplicateEntries(expectedElements);
		removeInvalidEntriesAtEnd(expectedElements);
		return expectedElements.toArray(new org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[expectedElements.size()]);
	}
	
	private void removeDuplicateEntries(java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedElements) {
		for (int i = 0; i < expectedElements.size() - 1; i++) {
			org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal elementAtIndex = expectedElements.get(i);
			for (int j = i + 1; j < expectedElements.size();) {
				org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal elementAtNext = expectedElements.get(j);
				if (elementAtIndex.equals(elementAtNext) && elementAtIndex.getStartExcludingHiddenTokens() == elementAtNext.getStartExcludingHiddenTokens()) {
					expectedElements.remove(j);
				} else {
					j++;
				}
			}
		}
	}
	
	private void removeInvalidEntriesAtEnd(java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedElements) {
		for (int i = 0; i < expectedElements.size() - 1;) {
			org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal elementAtIndex = expectedElements.get(i);
			org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal elementAtNext = expectedElements.get(i + 1);
			if (elementAtIndex.getStartExcludingHiddenTokens() == elementAtNext.getStartExcludingHiddenTokens() && shouldRemove(elementAtIndex.getFollowSetID(), elementAtNext.getFollowSetID())) {
				expectedElements.remove(i + 1);
			} else {
				i++;
			}
		}
	}
	
	public boolean shouldRemove(int followSetID1, int followSetID2) {
		return followSetID1 != followSetID2;
	}
	
	private String findPrefix(java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedElements, org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal expectedAtCursor, String content, int cursorOffset) {
		if (cursorOffset < 0) {
			return "";
		}
		int end = 0;
		for (org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal expectedElement : expectedElements) {
			if (expectedElement == expectedAtCursor) {
				final int start = expectedElement.getStartExcludingHiddenTokens();
				if (start >= 0  && start < Integer.MAX_VALUE) {
					end = start;
				}
				break;
			}
		}
		end = Math.min(end, cursorOffset);
		final String prefix = content.substring(end, Math.min(content.length(), cursorOffset));
		System.out.println("Found prefix '" + prefix + "'");
		return prefix;
	}
	
	private java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> deriveProposals(java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedElements, String content, org.emftext.language.refactoring.specification.resource.IRefspecTextResource resource, int cursorOffset) {
		java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> resultSet = new java.util.LinkedHashSet<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal>();
		for (org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal expectedElement : expectedElements) {
			resultSet.addAll(deriveProposals(expectedElement, content, resource, cursorOffset));
		}
		return resultSet;
	}
	
	private java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> deriveProposals(org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal expectedTerminal, String content, org.emftext.language.refactoring.specification.resource.IRefspecTextResource resource, int cursorOffset) {
		org.emftext.language.refactoring.specification.resource.mopp.RefspecMetaInformation metaInformation = resource.getMetaInformation();
		org.emftext.language.refactoring.specification.resource.IRefspecLocationMap locationMap = resource.getLocationMap();
		org.emftext.language.refactoring.specification.resource.IRefspecExpectedElement expectedElement = (org.emftext.language.refactoring.specification.resource.IRefspecExpectedElement) expectedTerminal.getTerminal();
		if (expectedElement instanceof org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedCsString) {
			org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedCsString csString = (org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedCsString) expectedElement;
			return deriveProposal(csString, content, expectedTerminal.getPrefix(), cursorOffset);
		} else if (expectedElement instanceof org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedStructuralFeature) {
			org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedStructuralFeature expectedFeature = (org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedStructuralFeature) expectedElement;
			org.eclipse.emf.ecore.EStructuralFeature feature = expectedFeature.getFeature();
			org.eclipse.emf.ecore.EClassifier featureType = feature.getEType();
			java.util.List<org.eclipse.emf.ecore.EObject> elementsAtCursor = locationMap.getElementsAt(cursorOffset);
			org.eclipse.emf.ecore.EObject container = null;
			// we need to skip the proxy elements at the cursor, because they are not the container for the reference we try to complete
			for (int i = 0; i < elementsAtCursor.size(); i++) {
				container = elementsAtCursor.get(i);
				if (!container.eIsProxy()) {
					break;
				}
			}
			// if no container can be found, the cursor is probably at the
			// end of the document. we need to create artificial containers.
			if (container == null) {
				boolean attachedArtificialContainer = false;
				org.eclipse.emf.ecore.EClass containerClass = expectedTerminal.getTerminal().getRuleMetaclass();
				org.eclipse.emf.ecore.EStructuralFeature[] containmentTrace = expectedTerminal.getContainmentTrace();
				java.util.List<org.eclipse.emf.ecore.EObject> contentList = null;
				for (org.eclipse.emf.ecore.EStructuralFeature eStructuralFeature : containmentTrace) {
					if (attachedArtificialContainer) {
						break;
					}
					org.eclipse.emf.ecore.EClass neededClass = eStructuralFeature.getEContainingClass();
					// fill the content list during the first iteration of the loop
					if (contentList == null) {
						contentList = new java.util.ArrayList<org.eclipse.emf.ecore.EObject>();
						java.util.Iterator<org.eclipse.emf.ecore.EObject> allContents = resource.getAllContents();
						while (allContents.hasNext()) {
							org.eclipse.emf.ecore.EObject next = allContents.next();
							contentList.add(next);
						}
					}
					// find object to attach artificial container to
					for (int i = contentList.size() - 1; i >= 0; i--) {
						org.eclipse.emf.ecore.EObject object = contentList.get(i);
						if (neededClass.isInstance(object)) {
							org.eclipse.emf.ecore.EObject newContainer = containerClass.getEPackage().getEFactoryInstance().create(containerClass);
							org.emftext.language.refactoring.specification.resource.util.RefspecEObjectUtil.setFeature(object, eStructuralFeature, newContainer, false);
							container = newContainer;
							attachedArtificialContainer = true;
						}
					}
				}
			}
			
			if (feature instanceof org.eclipse.emf.ecore.EReference) {
				org.eclipse.emf.ecore.EReference reference = (org.eclipse.emf.ecore.EReference) feature;
				if (featureType instanceof org.eclipse.emf.ecore.EClass) {
					if (reference.isContainment()) {
						// the FOLLOW set should contain only non-containment references
						assert false;
					} else {
						return handleNCReference(metaInformation, container, reference, expectedTerminal.getPrefix());
					}
				}
			} else if (feature instanceof org.eclipse.emf.ecore.EAttribute) {
				org.eclipse.emf.ecore.EAttribute attribute = (org.eclipse.emf.ecore.EAttribute) feature;
				if (featureType instanceof org.eclipse.emf.ecore.EEnum) {
					org.eclipse.emf.ecore.EEnum enumType = (org.eclipse.emf.ecore.EEnum) featureType;
					return deriveProposals(expectedTerminal, enumType, content, cursorOffset);
				} else {
					// handle EAttributes (derive default value depending on
					// the type of the attribute, figure out token resolver, and
					// call deResolve())
					return handleAttribute(metaInformation, expectedFeature, container, attribute, expectedTerminal.getPrefix());
				}
			} else {
				// there should be no other subclass of EStructuralFeature
				assert false;
			}
		} else {
			// there should be no other class implementing IExpectedElement
			assert false;
		}
		return java.util.Collections.emptyList();
	}
	
	private java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> deriveProposals(org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal expectedElement, org.eclipse.emf.ecore.EEnum enumType, String content, int cursorOffset) {
		java.util.Collection<org.eclipse.emf.ecore.EEnumLiteral> enumLiterals = enumType.getELiterals();
		java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> result = new java.util.LinkedHashSet<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal>();
		for (org.eclipse.emf.ecore.EEnumLiteral literal : enumLiterals) {
			String proposal = literal.getLiteral();
			String prefix = expectedElement.getPrefix();
			if (matches(proposal, prefix)) {
				result.add(new org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal(proposal, prefix, !"".equals(prefix), true));
			}
		}
		return result;
	}
	
	private java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> handleNCReference(org.emftext.language.refactoring.specification.resource.mopp.RefspecMetaInformation metaInformation, org.eclipse.emf.ecore.EObject container, org.eclipse.emf.ecore.EReference reference, java.lang.String prefix) {
		// proposals for non-containment references are derived by calling the
		// reference resolver switch in fuzzy mode.
		org.emftext.language.refactoring.specification.resource.IRefspecReferenceResolverSwitch resolverSwitch = metaInformation.getReferenceResolverSwitch();
		org.emftext.language.refactoring.specification.resource.IRefspecReferenceResolveResult<org.eclipse.emf.ecore.EObject> result = new org.emftext.language.refactoring.specification.resource.mopp.RefspecReferenceResolveResult<org.eclipse.emf.ecore.EObject>(true);
		resolverSwitch.resolveFuzzy(prefix, container, reference, 0, result);
		java.util.Collection<org.emftext.language.refactoring.specification.resource.IRefspecReferenceMapping<org.eclipse.emf.ecore.EObject>> mappings = result.getMappings();
		if (mappings != null) {
			java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> resultSet = new java.util.LinkedHashSet<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal>();
			for (org.emftext.language.refactoring.specification.resource.IRefspecReferenceMapping<org.eclipse.emf.ecore.EObject> mapping : mappings) {
				final String identifier = mapping.getIdentifier();
				// check the prefix. return only matching references
				if (matches(identifier, prefix)) {
					resultSet.add(new org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal(identifier, prefix, true, true));
				}
			}
			return resultSet;
		}
		return java.util.Collections.emptyList();
	}
	
	private java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> handleAttribute(org.emftext.language.refactoring.specification.resource.mopp.RefspecMetaInformation metaInformation, org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedStructuralFeature expectedFeature, org.eclipse.emf.ecore.EObject container, org.eclipse.emf.ecore.EAttribute attribute, java.lang.String prefix) {
		java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> resultSet = new java.util.LinkedHashSet<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal>();
		java.lang.Object[] defaultValues = attributeValueProvider.getDefaultValues(attribute);
		if (defaultValues != null) {
			for (Object defaultValue : defaultValues) {
				if (defaultValue != null) {
					org.emftext.language.refactoring.specification.resource.IRefspecTokenResolverFactory tokenResolverFactory = metaInformation.getTokenResolverFactory();
					String tokenName = expectedFeature.getTokenName();
					if (tokenName != null) {
						org.emftext.language.refactoring.specification.resource.IRefspecTokenResolver tokenResolver = tokenResolverFactory.createTokenResolver(tokenName);
						if (tokenResolver != null) {
							String defaultValueAsString = tokenResolver.deResolve(defaultValue, attribute, container);
							if (matches(defaultValueAsString, prefix)) {
								resultSet.add(new org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal(defaultValueAsString, prefix, !"".equals(prefix), true));
							}
						}
					}
				}
			}
		}
		return resultSet;
	}
	
	private java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> deriveProposal(org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedCsString csString, String content, String prefix, int cursorOffset) {
		String proposal = csString.getValue();
		java.util.Collection<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal> result = new java.util.LinkedHashSet<org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal>();
		if (matches(proposal, prefix)) {
			result.add(new org.emftext.language.refactoring.specification.resource.mopp.RefspecCompletionProposal(proposal, prefix, !"".equals(prefix), false));
		}
		return result;
	}
	
	// for each given expected elements the prefix is calculated
	// the prefix depends on the current document content, the cursor position, and
	// the position where the element is expected
	private void setPrefixes(java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedElements, String content, int cursorOffset) {
		if (cursorOffset < 0) {
			return;
		}
		for (org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal expectedElement : expectedElements) {
			java.lang.String prefix = findPrefix(expectedElements, expectedElement, content, cursorOffset);
			expectedElement.setPrefix(prefix);
		}
	}
	
	public org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[] getElementsExpectedAt(org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[] allExpectedElements, int cursorOffset) {
		java.util.List<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal> expectedAtCursor = new java.util.ArrayList<org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal>();
		for (int i = 0; i < allExpectedElements.length; i++) {
			org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal expectedElement = allExpectedElements[i];
			int startIncludingHidden = expectedElement.getStartIncludingHiddenTokens();
			int end = getEnd(allExpectedElements, i);
			if (cursorOffset >= startIncludingHidden && cursorOffset <= end) {
				expectedAtCursor.add(expectedElement);
			}
		}
		return expectedAtCursor.toArray(new org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[expectedAtCursor.size()]);
	}
	
	private int getEnd(org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal[] allExpectedElements, int indexInList) {
		org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal elementAtIndex = allExpectedElements[indexInList];
		int startIncludingHidden = elementAtIndex.getStartIncludingHiddenTokens();
		int startExcludingHidden = elementAtIndex.getStartExcludingHiddenTokens();
		for (int i = indexInList + 1; i < allExpectedElements.length; i++) {
			org.emftext.language.refactoring.specification.resource.mopp.RefspecExpectedTerminal elementAtI = allExpectedElements[i];
			int startIncludingHiddenForI = elementAtI.getStartIncludingHiddenTokens();
			int startExcludingHiddenForI = elementAtI.getStartExcludingHiddenTokens();
			if (startIncludingHidden != startIncludingHiddenForI || startExcludingHidden != startExcludingHiddenForI) {
				return startIncludingHiddenForI - 1;
			}
		}
		return Integer.MAX_VALUE;
	}
	
	private boolean matches(java.lang.String proposal, java.lang.String prefix) {
		return (proposal.startsWith(prefix) || org.emftext.language.refactoring.specification.resource.util.RefspecStringUtil.matchCamelCase(prefix, proposal) != null) && !proposal.equals(prefix);
	}
	
}
