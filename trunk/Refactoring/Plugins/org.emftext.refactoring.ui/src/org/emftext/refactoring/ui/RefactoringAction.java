package org.emftext.refactoring.ui;

import java.io.IOException;
import java.util.Collection;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IWorkspaceRunnable;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature.Setting;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.transaction.RecordingCommand;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.emftext.language.refactoring.rolemapping.Mapping;
import org.emftext.refactoring.interpreter.IRefactorer;
import org.emftext.refactoring.util.RegistryUtil;

/**
 * This action can be registered to the context menus of editors
 * generated by EMFText to enable refactorings.
 */
public class RefactoringAction extends Action {

	private Mapping mapping;
	private IRefactorer refactorer;
	private Resource resource;
	private ISelectionProvider selectionProvider;
	private EObject refactoredModel;
	private IDiagramEditDomain diagramEditingDomain;

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, Resource resource, ISelectionProvider selectionProvider) {
		super();
		this.mapping = mapping;
		this.refactorer = refactorer;
		this.resource = resource;
		this.selectionProvider = selectionProvider;
	}

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, Resource resource, ISelectionProvider selectionProvider, IDiagramEditDomain diagramEditingDomain) {
		this(mapping, refactorer, resource, selectionProvider);
		this.diagramEditingDomain = diagramEditingDomain;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.jface.action.Action#run()
	 */
	@Override
	public void run() {
		ResourceSet rs = resource.getResourceSet();
		RefactoringRecordingCommand command = null;
		TransactionalEditingDomain domain = null;
		try {
			domain = TransactionUtil.getEditingDomain(rs);
			if(domain == null){
				domain = TransactionalEditingDomain.Factory.INSTANCE.createEditingDomain(rs);
			}
			if(diagramEditingDomain != null){
				AbstractTransactionalCommand gmfCommand = new AbstractTransactionalCommand(domain, "", null) {
					@Override
					protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						// TODO Auto-generated method stub
						return null;
					}
				};
				DiagramCommandStack diagramStack = diagramEditingDomain.getDiagramCommandStack();
//				diagramStack.execute(gmfCommand);
			} else {
				CommandStack stack = domain.getCommandStack();
				command = new RefactoringRecordingCommand(resource, domain, refactorer, mapping);
				stack.execute(command);
				if(command.didErrorsOccur()){
					if(command.getException() != null){
						throw command.getException();
					}
					throw new Exception("Some instructions couldn't be invoked");
				}
			}
		} catch (Exception e) {
			if(command != null){
				command.undo();
			}
			RegistryUtil.log("Refactoring rolled back because of the stack trace or message above", IStatus.WARNING, e);
		}
		if(domain != null){
			domain.dispose();
		}
	}

	class RefactoringRecordingCommand extends RecordingCommand{

		private EObject refactoredModel;
		private IRefactorer refactorer;
		private Mapping mapping;
		private Resource resource;
		private boolean didErrorsOccur = false;
		private Exception exception;
		private TransactionalEditingDomain domain;

		public RefactoringRecordingCommand(Resource resource,TransactionalEditingDomain domain, IRefactorer refactorer, Mapping mapping) {
			super(domain);
			this.domain = domain;
			this.refactorer = refactorer;
			this.mapping = mapping;
			this.resource = resource;
		}

		@Override
		protected void doExecute() {
			try {
				refactoredModel = refactorer.refactor(mapping, false);
				//				TransactionUtil.disconnectFromEditingDomain(resource);
				if(!refactorer.didErrorsOccur()){
					//					resource.getContents().set(0, refactoredModel);
					final ResourceSet resourceSet = resource.getResourceSet();
					URI origURI = resource.getURI();
					Resource nonProxyResource = resourceSet.getResource(origURI, true); 
					if(nonProxyResource != null){
						resource = nonProxyResource;
					} else {
						resourceSet.getResources().add(resource);
					}
					boolean contained = resourceSet.getResources().contains(resource);
					//					final List<Resource> references = new LinkedList<Resource>();
					//					references.add(resource);
					for (Resource externalReferer : refactorer.getResourcesToSave()) {
						URI uri = externalReferer.getURI();
						Resource temp = resourceSet.getResource(uri, true);
						if(temp == null){
							resourceSet.getResources().add(externalReferer);
						}
					}
					Map<EObject, Collection<Setting>> externalReferences = EcoreUtil.ExternalCrossReferencer.find(resource);
					for (EObject object : externalReferences.keySet()) {
						Resource externalReference = object.eResource();
						if(externalReference != null && externalReference.getURI().isPlatformResource()){
							resourceSet.getResources().add(externalReference);
						}
					}
					ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() {

						public void run(IProgressMonitor monitor) throws CoreException {
							try {
								EcoreUtil.resolveAll(resourceSet);
								//								resource.getContents().set(0, refactoredModel);
								resource.save(null);
								for (Resource externalResource : resourceSet.getResources()) {
									if(!externalResource.equals(resource)){
										externalResource.save(null);
										System.out.println("Saved resource " + externalResource + " after refactoring '" + mapping.getName() + "'");
										//									externalResource.setModified(true);
									}
								}
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
					}, null);

				} else {
					didErrorsOccur = true;
				}
			} catch (Exception e) {
				didErrorsOccur = true;
				exception = e;
			}
		}

		public boolean didErrorsOccur() {
			return didErrorsOccur;
		}

		public Exception getException() {
			return exception;
		}

	}
}
