package org.emftext.refactoring.ui;


import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.internal.WorkbenchPlugin;
import org.emftext.language.refactoring.rolemapping.Mapping;
import org.emftext.refactoring.interpreter.Activator;
import org.emftext.refactoring.interpreter.IRefactorer;
import org.emftext.refactoring.interpreter.IRefactoringStatus;
import org.emftext.refactoring.interpreter.RefactoringStatus;
import org.emftext.refactoring.util.RegistryUtil;

/**
 * This action can be registered to the context menus of editors
 * generated by EMFText to enable refactorings.
 */
public class RefactoringAction extends Action {

	private Mapping mapping;
	private IRefactorer refactorer;
	private ISelectionProvider selectionProvider;
	private EObject refactoredModel;
	private IDiagramEditDomain diagramEditingDomain;
	private TransactionalEditingDomain diagramTransactionalEditingDomain;
	private IEditorPart activeEditor;

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider) {
		super();
		this.mapping = mapping;
		this.refactorer = refactorer;
		this.selectionProvider = selectionProvider;
	}

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider, IDiagramEditDomain diagramEditingDomain, IEditorPart activeEditor) {
		this(mapping, refactorer, selectionProvider);
		this.diagramEditingDomain = diagramEditingDomain;
		this.activeEditor = activeEditor;
	}

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, ISelectionProvider selectionProvider, TransactionalEditingDomain diagramTransactionalEditingDomain, IEditorPart activeEditor) {
		this(mapping, refactorer, selectionProvider);
		this.diagramTransactionalEditingDomain = diagramTransactionalEditingDomain;
		this.activeEditor = activeEditor;
	}

	/* (non-Javadoc)
	 * @see org.eclipse.jface.action.Action#run()
	 */
	@Override
	public void run() {
		ResourceSet rs = refactorer.getResource().getResourceSet();
		RefactoringRecordingCommand command = null;
		TransactionalEditingDomain domain = null;
		try {
			domain = TransactionUtil.getEditingDomain(rs);
			if(domain == null){
				domain = TransactionalEditingDomain.Factory.INSTANCE.createEditingDomain(rs);
			}	
			CommandStack stack = domain.getCommandStack();
			command = new RefactoringRecordingCommand(domain, refactorer, mapping, activeEditor);
			stack.execute(command);
			IRefactoringStatus status = command.getStatus();
			statusSwitch(command, status);
		} catch (Exception e) {
			if(command != null && command.canUndo()){
				command.undo();
			}
			IRefactoringStatus status = new RefactoringStatus(IRefactoringStatus.ERROR, "Refactoring rolled back", e);
			Activator.getDefault().getLog().log(status);
			Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
			String title = "Refactoring was rolled back";
			String message = "Refactoring rolled back because of an unforseen error. Check out the error log";
			MessageDialog.openInformation(shell, title, message);
		}
		if(domain != null && diagramTransactionalEditingDomain == null){
			domain.dispose();
		}
	}

	/**
	 * @param command
	 * @param status
	 */
	private void statusSwitch(RefactoringRecordingCommand command,
			IRefactoringStatus status) {
		Shell shell;
		String title;
		String message;
		switch (status.getSeverity()) {
		case IRefactoringStatus.OK:
			System.out.println("Refactored successfull");
			break;
		case IRefactoringStatus.INFO:
			shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
			title = "Information";
			message = status.getMessage();
			MessageDialog.openInformation(shell, title, message);
			if(command.canUndo()){
				command.undo();
			}
			System.out.println("Refactoring rolled back because of some infos");
			break;
		case IRefactoringStatus.WARNING:
			shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
			title = "Information";
			message = status.getMessage();
			MessageDialog.openInformation(shell, title, message);
			if(command.canUndo()){
				command.undo();
			}
			System.out.println("Refactoring rolled back because of some warnings");
			break;
		case IRefactoringStatus.CANCEL:
			if(command.canUndo()){
				command.undo();
			}
			System.out.println("Refactoring rolled back because of cancelation of dialog");
			break;
		case IRefactoringStatus.ERROR:
			shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
			title = "Refactoring will be rolled back";
			message = "The refactoring will be rolled back because of the following unforseen error: \n\n";
			message += status.getMessage();
			if(status.getException() != null){
				message += "\n\nCheck out the error log for further information.";
				Activator.getDefault().getLog().log(status);
			}
			MessageDialog.openInformation(shell, title, message);
			if(command.canUndo()){
				command.undo();
			}
			System.out.println("Refactoring rolled back because of an error");
			break;
		default:
			break;
		}
	}
}
