package org.emftext.refactoring.ui;


import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.commands.operations.IUndoableOperation;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PlatformUI;
import org.emftext.language.refactoring.rolemapping.Mapping;
import org.emftext.refactoring.interpreter.Activator;
import org.emftext.refactoring.interpreter.IRefactorer;
import org.emftext.refactoring.interpreter.IRefactoringStatus;
import org.emftext.refactoring.interpreter.RefactoringStatus;
import org.emftext.refactoring.ltk.ModelRefactoring;
import org.emftext.refactoring.ltk.ModelRefactoringWizard;

/**
 * This action can be registered to the context menus of editors
 * generated by EMFText to enable refactorings.
 */
public class RefactoringAction extends Action {

	private Mapping mapping;
	private IRefactorer refactorer;
	private EObject refactoredModel;
	private TransactionalEditingDomain diagramTransactionalEditingDomain;
	private IEditorPart activeEditor;

	public RefactoringAction(Mapping mapping, IRefactorer refactorer) {
		super();
		this.mapping = mapping;
		this.refactorer = refactorer;
	}

	public RefactoringAction(Mapping mapping, IRefactorer refactorer, TransactionalEditingDomain diagramTransactionalEditingDomain, IEditorPart activeEditor) {
		this(mapping, refactorer);
		this.diagramTransactionalEditingDomain = diagramTransactionalEditingDomain;
		this.activeEditor = activeEditor;
	}

	@Override
	public void run() {
		ltkRun();
	}
	
	public void ltkRun(){
		ModelRefactoring refactoring = new ModelRefactoring(refactorer, mapping, diagramTransactionalEditingDomain, getText(), activeEditor);
		ModelRefactoringWizard wizard = new ModelRefactoringWizard(refactoring);
		RefactoringWizardOpenOperation op = new RefactoringWizardOpenOperation(wizard);
		Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
		try {
			op.run(shell, getText());
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
