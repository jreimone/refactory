/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.emftext.language.refactoring.roles.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.emftext.language.refactoring.roles.util.RolesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RolesItemProviderAdapterFactory extends RolesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RolesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.RoleModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleModelItemProvider roleModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.RoleModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleModelAdapter() {
		if (roleModelItemProvider == null) {
			roleModelItemProvider = new RoleModelItemProvider(this);
		}

		return roleModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.RoleImplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleImplicationItemProvider roleImplicationItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.RoleImplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleImplicationAdapter() {
		if (roleImplicationItemProvider == null) {
			roleImplicationItemProvider = new RoleImplicationItemProvider(this);
		}

		return roleImplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.RoleAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleAttributeItemProvider roleAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.RoleAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAttributeAdapter() {
		if (roleAttributeItemProvider == null) {
			roleAttributeItemProvider = new RoleAttributeItemProvider(this);
		}

		return roleAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.RoleProhibition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleProhibitionItemProvider roleProhibitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.RoleProhibition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleProhibitionAdapter() {
		if (roleProhibitionItemProvider == null) {
			roleProhibitionItemProvider = new RoleProhibitionItemProvider(this);
		}

		return roleProhibitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.Multiplicity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicityItemProvider multiplicityItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.Multiplicity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicityAdapter() {
		if (multiplicityItemProvider == null) {
			multiplicityItemProvider = new MultiplicityItemProvider(this);
		}

		return multiplicityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.RoleAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleAssociationItemProvider roleAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.RoleAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAssociationAdapter() {
		if (roleAssociationItemProvider == null) {
			roleAssociationItemProvider = new RoleAssociationItemProvider(this);
		}

		return roleAssociationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.refactoring.roles.RoleComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleCompositionItemProvider roleCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.refactoring.roles.RoleComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleCompositionAdapter() {
		if (roleCompositionItemProvider == null) {
			roleCompositionItemProvider = new RoleCompositionItemProvider(this);
		}

		return roleCompositionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (roleModelItemProvider != null) roleModelItemProvider.dispose();
		if (multiplicityItemProvider != null) multiplicityItemProvider.dispose();
		if (roleProhibitionItemProvider != null) roleProhibitionItemProvider.dispose();
		if (roleAssociationItemProvider != null) roleAssociationItemProvider.dispose();
		if (roleCompositionItemProvider != null) roleCompositionItemProvider.dispose();
		if (roleImplicationItemProvider != null) roleImplicationItemProvider.dispose();
		if (roleAttributeItemProvider != null) roleAttributeItemProvider.dispose();
	}

}
