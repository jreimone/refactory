ROLEMODELMAPPING FOR <http://www.emftext.org/language/pl0>

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement;
		referer := statements:CallStatement;
	};
	Extract := CallStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block;
		referer := statements:CallStatement;
	};
	Extract := Block;
	NewContainer := ProcedureDeclaration {
		moved := block:Block;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> owner:Program;
		referer := statements:CallStatement;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:Program;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> owner:Program;
		referer := statements:CallStatement;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:Program;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> allOwners:BlockOwner;
		referer := statements:CallStatement;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:BlockOwner;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> allOwners:BlockOwner;
		referer := statements:CallStatement;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:BlockOwner;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> allOwners:Program;
		referer := statements:CallStatement;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:Program;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> allOwners:Program;
		referer := statements:CallStatement;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:Program;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> body:Body;
		referer := statements:CallStatement;
	};
	Extract := Body;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> variables:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> variables:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> constants:ConstDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ConstDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> constants:ConstDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> owner:BlockOwner;
		referer := statements:CallStatement;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:BlockOwner;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:CallStatement -> procedure:ProcedureDeclaration -> block:Block -> owner:BlockOwner;
		referer := statements:CallStatement;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:BlockOwner;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:Statement;
		referer := statements:CallStatement;
	};
	Extract := Statement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Statement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:Assignment;
		referer := statements:CallStatement;
	};
	Extract := Assignment;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:Assignment -> right:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:Assignment -> right:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement;
		referer := statements:CallStatement;
	};
	Extract := IfStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body;
		referer := statements:CallStatement;
	};
	Extract := Body;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body;
		referer := statements:CallStatement;
	};
	Extract := Body;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:CallStatement;
		referer := statements:CallStatement;
	};
	Extract := CallStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:Statement;
		referer := statements:CallStatement;
	};
	Extract := Statement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Statement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:Assignment;
		referer := statements:CallStatement;
	};
	Extract := Assignment;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:WhileStatement;
		referer := statements:CallStatement;
	};
	Extract := WhileStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:RelationalCondition -> right:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:RelationalCondition -> left:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:RelationalCondition -> left:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:RelationalCondition -> right:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:OddCondition -> expression:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> condition:OddCondition -> expression:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:CallStatement;
		referer := statements:CallStatement;
	};
	Extract := CallStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:Statement;
		referer := statements:CallStatement;
	};
	Extract := Statement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Statement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:Assignment;
		referer := statements:CallStatement;
	};
	Extract := Assignment;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:WhileStatement;
		referer := statements:CallStatement;
	};
	Extract := WhileStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:Assignment -> right:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:Assignment -> right:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:WhileStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> then:Body -> statements:WhileStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:Assignment -> right:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:Assignment -> right:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:WhileStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:IfStatement -> else:Body -> statements:WhileStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement;
		referer := statements:CallStatement;
	};
	Extract := WhileStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body;
		referer := statements:CallStatement;
	};
	Extract := Body;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:CallStatement;
		referer := statements:CallStatement;
	};
	Extract := CallStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:Statement;
		referer := statements:CallStatement;
	};
	Extract := Statement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Statement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:Assignment;
		referer := statements:CallStatement;
	};
	Extract := Assignment;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:IfStatement;
		referer := statements:CallStatement;
	};
	Extract := IfStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:OddCondition -> expression:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:OddCondition -> expression:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:RelationalCondition -> right:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:RelationalCondition -> left:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:RelationalCondition -> left:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> condition:RelationalCondition -> right:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := statements:CallStatement;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:Assignment -> right:TermExpression;
		referer := statements:CallStatement;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:Assignment -> right:Expression;
		referer := statements:CallStatement;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:Assignment -> left:VarDeclaration;
		referer := statements:CallStatement;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:IfStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:IfStatement -> condition:Condition;
		referer := statements:CallStatement;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:IfStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:IfStatement -> condition:RelationalCondition;
		referer := statements:CallStatement;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:IfStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := Body {
		extracts := statements:WhileStatement -> do:Body -> statements:IfStatement -> condition:OddCondition;
		referer := statements:CallStatement;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := body:Body;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := CallStatement {
		containerRef := procedure:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block;
		referer := block:Block;
	};
	Extract := Block;
	NewContainer := ProcedureDeclaration {
		moved := block:Block;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block;
		referer := block:Block;
	};
	Extract := Block;
	NewContainer := ProcedureDeclaration {
		moved := block:Block;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:Program;
		referer := block:Block;
	};
	Extract := Program;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:Program;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> procedures:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body;
		referer := block:Block;
	};
	Extract := Body;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body;
		referer := block:Block;
	};
	Extract := Body;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> variables:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> variables:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> variables:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> variables:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> constants:ConstDeclaration;
		referer := block:Block;
	};
	Extract := ConstDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> constants:ConstDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> constants:ConstDeclaration;
		referer := block:Block;
	};
	Extract := ConstDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> constants:ConstDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> allOwners:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> owner:BlockOwner;
		referer := block:Block;
	};
	Extract := BlockOwner;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:BlockOwner;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement;
		referer := block:Block;
	};
	Extract := CallStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement;
		referer := block:Block;
	};
	Extract := CallStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Statement;
		referer := block:Block;
	};
	Extract := Statement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Statement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Statement;
		referer := block:Block;
	};
	Extract := Statement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Statement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment;
		referer := block:Block;
	};
	Extract := Assignment;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment;
		referer := block:Block;
	};
	Extract := Assignment;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement;
		referer := block:Block;
	};
	Extract := IfStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement;
		referer := block:Block;
	};
	Extract := IfStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement;
		referer := block:Block;
	};
	Extract := WhileStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement;
		referer := block:Block;
	};
	Extract := WhileStatement;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> owner:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> procedures:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> allOwners:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
		referer := block:Block;
	};
	Extract := ProcedureDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:CallStatement -> procedure:ProcedureDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
		referer := block:Block;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
		referer := block:Block;
	};
	Extract := TermExpression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:TermExpression;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> right:Expression;
		referer := block:Block;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> right:Expression;
		referer := block:Block;
	};
	Extract := Expression;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> right:Expression;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> variables:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
		referer := block:Block;
	};
	Extract := VarDeclaration;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:Assignment -> left:VarDeclaration;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:OddCondition;
		referer := block:Block;
	};
	Extract := OddCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:OddCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
		referer := block:Block;
	};
	Extract := RelationalCondition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:RelationalCondition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:IfStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := owner:ProcedureDeclaration;
	};
	
	
}

"ExtractXwithReferenceClass for pl0" maps <ExtractXwithReferenceClass> {
	OrigContainer := ProcedureDeclaration {
		extracts := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
		referer := block:Block;
	};
	Extract := Condition;
	NewContainer := ProcedureDeclaration {
		moved := block:Block -> body:Body -> statements:WhileStatement -> condition:Condition;
	};
	ContainerContainer := Block {
		source := procedures:ProcedureDeclaration;
		target := procedures:ProcedureDeclaration;
	};
	MovedReference := Block {
		containerRef := allOwners:ProcedureDeclaration;
	};
	
	
}

