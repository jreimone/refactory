import "http://www.eclipse.org/emf/2002/Ecore"

pattern ExtractXWithRefClass(OrigCont: EClass, ContCont: EClass, Extract:EClass, NewCont:EClass,
	MovedRef:EClass, extracts:EReference, source:EReference, target:EReference, referer:EReference,
	moved:EReference, containerRef:EReference){

	find eAllContainments(PH_OrigCont,extracts);
	ETypedElement.eType(extracts,PH_Extract);
	
	find eAllContainments(PH_ContCont,source);
	ETypedElement.eType(source,PH_OrigCont);
	
	find eAllContainments(PH_ContCont,target);
	ETypedElement.eType(target,PH_NewCont);
	
	find eAllContainments(PH_OrigCont,referer);
	ETypedElement.eType(referer,PH_MovedRef);
	
	find eAllContainments(PH_NewCont,moved);
	ETypedElement.eType(moved,PH_Extract);
	
	find eAllReferences(PH_MovedRef,containerRef);
	ETypedElement.eType(containerRef,PH_NewCont);
	neg find isAggregation(containerRef);

	find thisAndAllSuperTypes(OrigCont, PH_OrigCont);
	find thisAndAllSuperTypes(ContCont, PH_ContCont);
	find thisAndAllSuperTypes(MovedRef, PH_MovedRef);
	find thisAndAllSuperTypes(NewCont, PH_NewCont);
	find thisAndAllSuperTypes(Extract, PH_Extract);
	
	neg find isEcore(OrigCont);
	neg find isEcore(ContCont);
	neg find isEcore(NewCont);
	neg find isEcore(MovedRef);
	neg find isEcore(Extract);
}

pattern containment(Source: EClass, reference: EReference, Target: EClass){
	find eAllContainments(PH_Source,reference);
	ETypedElement.eType(reference,PH_Target);
	find thisAndAllSuperTypes(Source, PH_Source);
	find thisAndAllSuperTypes(Target, PH_Target);
	neg find isEcore(Source);
}

pattern reference(Source: EClass, reference: EReference, Target: EClass){
	find eAllReferences(PH_Source,reference);
	ETypedElement.eType(reference,PH_Target);
	neg find isAggregation(reference);
	find thisAndAllSuperTypes(Source, PH_Source);
	find thisAndAllSuperTypes(Target, PH_Target);
	neg find isEcore(Source);
}

pattern ExtractXWithRefClass2(OrigCont: EClass, ContCont: EClass, Extract:EClass, NewCont:EClass,
	MovedRef:EClass, extracts:EReference, source:EReference, target:EReference, referer:EReference,
	moved:EReference, containerRef:EReference){

	find containment(OrigCont, extracts, Extract);
	find containment(ContCont, source, OrigCont);
	find containment(ContCont, target, NewCont);
	find containment(OrigCont, referer, MovedRef);
	find containment(NewCont, moved, Extract);
	find reference(MovedRef, containerRef, NewCont);
}

pattern canTransitivelyContain(Source : EClass, Target : EClass) {
	find canContain+(Source, Target);
} 

pattern canContain(Source: EClass, Target : EClass) {
	find eAllContainments(Source,reference);
	EReference.eType(reference, Target);
}

pattern pathContain(Source: EClass, reference: EReference){
	find eAllContainments(Source, reference);	
	EReference.eType(reference, Type);
	find pathContain(Type, nextReference);
}

@QueryExplorer(display = false)
pattern isEcore(Element){
	EClassifier.ePackage(Element,EP);
	EPackage(EP);
	EPackage.nsURI(EP,"http://www.eclipse.org/emf/2002/Ecore");
}

@QueryExplorer(display = false)
pattern isAggregation(ref:EReference){
	EReference.containment(ref,true);
}

// well-behaving ecore patterns

@QueryExplorer(display = false)
private pattern eStructuralFeatures(This : EClass, Target : EStructuralFeature){
	EClass.eStructuralFeatures(This, Target);
}

@QueryExplorer(display = false)
pattern eAttributes(This : EClass, Target : EAttribute){
	find eStructuralFeatures(This, Target);
}

@QueryExplorer(display = false)
pattern eReferences(This : EClass, Target : EReference){
	find eStructuralFeatures(This, Target);
}

@QueryExplorer(display = false)
private pattern eGenericSuperTypes(This : EClass, Target : EGenericType){
	EClass.eGenericSuperTypes(This, Target);
}

@QueryExplorer(display = false)
pattern eAllGenericSuperTypes(This : EClass, Target : EGenericType){
	find eSuperTypes+(This, Type);
	find eGenericSuperTypes(Type, Target);
} or {
	find eGenericSuperTypes(This, Target);
}

@QueryExplorer(display = false)
private pattern eRawType(This : EGenericType, Target : EClass){
	EGenericType.eRawType(This, Target);
}

@QueryExplorer(display = false)
pattern eSuperTypes(This : EClass, Target : EClass){
	find eGenericSuperTypes(This, GenericType);
	find eRawType(GenericType, Target);
}

@QueryExplorer(display = false)
pattern eAllSuperTypes(This : EClass, Target : EClass){
	find eAllGenericSuperTypes(This, GenericType);
	find eRawType(GenericType, Target);
}

@QueryExplorer(display = false)
private pattern thisAndAllSuperTypes(This : EClass, Target : EClass){
	find eAllSuperTypes(This, Target);
} or {
	This == Target;
}

@QueryExplorer(display = false)
pattern eAllStructuralFeatures(This : EClass, Target : EStructuralFeature){
	find thisAndAllSuperTypes(This, Type);
	find eStructuralFeatures(Type, Target);
}

@QueryExplorer(display = false)
pattern eAllAttributes(This : EClass, Target : EAttribute){
	find eAllStructuralFeatures(This, Target);
}

@QueryExplorer(display = false)
pattern eAllReferences(This : EClass, Target : EReference){
	find eAllStructuralFeatures(This, Target);
}

@QueryExplorer(display = false)
pattern eAllContainments(This : EClass, Target : EReference){
	find eAllReferences(This, Target);
	EReference.containment(Target, true);
}

@QueryExplorer(display = false)
private pattern eOperations(This : EClass, Target : EOperation){
	EClass.eOperations(This, Target);
}

@QueryExplorer(display = false)
pattern eAllOperations(This : EClass, Target : EOperation){
	find thisAndAllSuperTypes(This, Type);
	find eOperations(Type, Target);
}

// NOTE: EMF uses the first attribute with id = true from all supertypes...
@QueryExplorer(display = false)
pattern eIDAttribute(This : EClass, Target : EAttribute){
	find eAllAttributes(This, Target);
	EAttribute.iD(Target, true);
}
