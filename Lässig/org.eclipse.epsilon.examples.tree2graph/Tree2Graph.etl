pre {
	"Running ETL".println();
}

post {
	// Store traceability links in custom model
	var trace : new Trace!Trace;
	for (t in transTrace.transformations) {
		var link : new Trace!TraceLink;
		link.sources.add(t.source);
		link.targets = t.targets;
		link.description = "Transformed by " + t.getRule().name;
		trace.links.add(link);
	}
}


rule Tree2Node 
	transform t : Tree!Tree
	to n : Graph!Node {
	
	n.name = t.label;
	
	// If t is not the top tree
	// create an edge connecting n
	// with the Node created from t's parent
	if (t.parent.isDefined()) {
		var e : new Graph!Edge;
		e.source ::= t.parent;
		e.target = n;
	}	
}