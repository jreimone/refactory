import "http://www.emftext.org/java/commons"
import "http://www.emftext.org/java/classifiers"
import "http://www.emftext.org/java/members"
import "http://www.emftext.org/java/types"
import "http://www.emftext.org/java/references"
import "http://www.emftext.org/java/statements"
import "http://www.emftext.org/java/instantiations"
import "http://www.emftext.org/java/variables"
import "http://www.eclipse.org/emf/2002/Ecore"

// inspired by the paper:
// HÃ¶pfner Bunse(2010)
// "Towards an energy-consumption based complexity classification for resource substitution strategies"
// the determined FileBody constructor is checked and must be replaced by a file that is compressed before 
pattern dataTransmissionWithoutCompressionOptimised(fileBodyConstructor: NewConstructorCall) {
	find fileBodyConstructorWithFileConstructorParameter(fileBodyVar, fileBodyConstructor, _);
	find transmissionCoreMethodCalls(fileBodyVar, _method);
}

// the first possibility for instantiating a FileBody:
// FileBody bin = new FileBody(new File(args[0]));
private pattern fileBodyConstructorWithFileConstructorParameter(
	fileBodyVar: LocalVariable,
	fileBodyConstructor: NewConstructorCall,
	fileArgumentConstructor: NewConstructorCall
){
//	LocalVariableStatement.variable(_, fileBodyVar);
	LocalVariable.initialValue(fileBodyVar, fileBodyConstructor);
	
	// FileBody constructor
	NewConstructorCall.typeReference(fileBodyConstructor, fileBodyConstructorType);
	NamespaceClassifierReference.classifierReferences(fileBodyConstructorType, fileBodyConstructorTypeReference);
	ClassifierReference.target(fileBodyConstructorTypeReference, fileBodyConstructorTypeReferenceTarget);
	Class.name(fileBodyConstructorTypeReferenceTarget, "FileBody");
	
	// File constructor
	NewConstructorCall.arguments(fileBodyConstructor, fileArgumentConstructor);
	NewConstructorCall.typeReference(fileArgumentConstructor, fileArgumentConstructorType);
	NamespaceClassifierReference.classifierReferences(fileArgumentConstructorType, fileArgumentConstructorTypeRef);
	ClassifierReference.target(fileArgumentConstructorTypeRef, fileArgumentConstructorTypeRefTarget);
	Class.name(fileArgumentConstructorTypeRefTarget, "File");
}

private pattern transmissionCoreMethodCalls
	(fileBodyVar : LocalVariable, classmethod: ClassMethod)
{
	// MultipartEntity.addPart(FileBody)
	IdentifierReference.target(entityVarRef, entityVar);
	IdentifierReference.next(entityVarRef, addPartCaller);
	MethodCall.target(addPartCaller, addPartCallee);
	Method.name(addPartCallee, "addPart");
	MethodCall.arguments(addPartCaller, fileBodyRef);
	IdentifierReference.target(fileBodyRef, fileBodyVar);
	
	// HttpPost.setEntity(MultipartEntity);
	IdentifierReference.target(httppostRef, httppostVar);
	IdentifierReference.next(httppostRef, setEntityCaller);
	MethodCall.target(setEntityCaller, setEntityCallee);
	Method.name(setEntityCallee, "setEntity");
	MethodCall.arguments(setEntityCaller, setEntityEntityVarArg);
	IdentifierReference.target(setEntityEntityVarArg, entityVar);
	
	// HttpClient.execute(HttpPost);
	MethodCall.target(executeCaller, executeCallee);
	Method.name(executeCallee, "execute");
	MethodCall.arguments(executeCaller, executeHttpPostVarArg);
	IdentifierReference.target(executeHttpPostVarArg, httppostVar);
	
	// give me the method in which everything is contained
	find parentContainsSomething+(classmethod, fileBodyVar);
}

private pattern parentContainsSomething(parent, child){
	LocalVariableStatement.variable(parent, child);
} or {
	StatementListContainer.statements(parent, child);
}